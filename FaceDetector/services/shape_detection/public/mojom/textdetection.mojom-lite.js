// services/shape_detection/public/mojom/textdetection.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('shapeDetection.mojom');








/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
shapeDetection.mojom.TextDetectionPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        shapeDetection.mojom.TextDetection.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { shapeDetection.mojom.TextDetectionInterface }
 */
shapeDetection.mojom.TextDetectionRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!shapeDetection.mojom.TextDetectionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          shapeDetection.mojom.TextDetectionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!shapeDetection.mojom.TextDetectionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !skia.mojom.BitmapN32 } bitmapData
   * @return {!Promise<{
        results: !Array<!shapeDetection.mojom.TextDetectionResult>,
   *  }>}
   */

  detect(
      bitmapData) {
    return this.proxy.sendMessage(
        0,
        shapeDetection.mojom.TextDetection_Detect_ParamsSpec.$,
        shapeDetection.mojom.TextDetection_Detect_ResponseParamsSpec.$,
        [
          bitmapData
        ]);
  }
};

/**
 * An object which receives request messages for the TextDetection
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
shapeDetection.mojom.TextDetectionReceiver = class {
  /**
   * @param {!shapeDetection.mojom.TextDetectionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!shapeDetection.mojom.TextDetectionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        shapeDetection.mojom.TextDetectionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!shapeDetection.mojom.TextDetectionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        shapeDetection.mojom.TextDetection_Detect_ParamsSpec.$,
        shapeDetection.mojom.TextDetection_Detect_ResponseParamsSpec.$,
        impl.detect.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
shapeDetection.mojom.TextDetection = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "shape_detection.mojom.TextDetection";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!shapeDetection.mojom.TextDetectionRemote}
   * @export
   */
  static getRemote() {
    let remote = new shapeDetection.mojom.TextDetectionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the TextDetection
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
shapeDetection.mojom.TextDetectionCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      shapeDetection.mojom.TextDetectionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!shapeDetection.mojom.TextDetectionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.detect =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        shapeDetection.mojom.TextDetection_Detect_ParamsSpec.$,
        shapeDetection.mojom.TextDetection_Detect_ResponseParamsSpec.$,
        this.detect.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
shapeDetection.mojom.TextDetectionResultSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
shapeDetection.mojom.TextDetection_Detect_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
shapeDetection.mojom.TextDetection_Detect_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    shapeDetection.mojom.TextDetectionResultSpec.$,
    'TextDetectionResult',
    [
      mojo.internal.StructField(
        'rawValue', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'boundingBox', 8,
        0,
        gfx.mojom.RectFSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'cornerPoints', 16,
        0,
        mojo.internal.Array(gfx.mojom.PointFSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
shapeDetection.mojom.TextDetectionResult = class {
  constructor() {
    /** @export { !string } */
    this.rawValue;
    /** @export { !gfx.mojom.RectF } */
    this.boundingBox;
    /** @export { !Array<!gfx.mojom.PointF> } */
    this.cornerPoints;
  }
};




mojo.internal.Struct(
    shapeDetection.mojom.TextDetection_Detect_ParamsSpec.$,
    'TextDetection_Detect_Params',
    [
      mojo.internal.StructField(
        'bitmapData', 0,
        0,
        skia.mojom.BitmapN32Spec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
shapeDetection.mojom.TextDetection_Detect_Params = class {
  constructor() {
    /** @export { !skia.mojom.BitmapN32 } */
    this.bitmapData;
  }
};




mojo.internal.Struct(
    shapeDetection.mojom.TextDetection_Detect_ResponseParamsSpec.$,
    'TextDetection_Detect_ResponseParams',
    [
      mojo.internal.StructField(
        'results', 0,
        0,
        mojo.internal.Array(shapeDetection.mojom.TextDetectionResultSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
shapeDetection.mojom.TextDetection_Detect_ResponseParams = class {
  constructor() {
    /** @export { !Array<!shapeDetection.mojom.TextDetectionResult> } */
    this.results;
  }
};


