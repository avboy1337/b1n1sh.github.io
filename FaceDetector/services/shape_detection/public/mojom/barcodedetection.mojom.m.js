// services/shape_detection/public/mojom/barcodedetection.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../mojo/public/js/bindings.js';

import {
  BitmapN32 as skia_mojom_BitmapN32,
  BitmapN32Spec as skia_mojom_BitmapN32Spec
} from '../../../../skia/public/mojom/bitmap.mojom.m.js';

import {
  PointF as gfx_mojom_PointF,
  PointFSpec as gfx_mojom_PointFSpec,
  RectF as gfx_mojom_RectF,
  RectFSpec as gfx_mojom_RectFSpec
} from '../../../../ui/gfx/geometry/mojom/geometry.mojom.m.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const BarcodeFormatSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const BarcodeFormat = {
  
  AZTEC: 0,
  CODE_128: 1,
  CODE_39: 2,
  CODE_93: 3,
  CODABAR: 4,
  DATA_MATRIX: 5,
  EAN_13: 6,
  EAN_8: 7,
  ITF: 8,
  PDF417: 9,
  QR_CODE: 10,
  UNKNOWN: 11,
  UPC_A: 12,
  UPC_E: 13,
  MIN_VALUE: 0,
  MAX_VALUE: 13,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class BarcodeDetectionPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'shape_detection.mojom.BarcodeDetection', scope);
  }
}

/** @interface */
export class BarcodeDetectionInterface {
  
  /**
   * @param { !skia_mojom_BitmapN32 } bitmapData
   * @return {!Promise<{
        results: !Array<!BarcodeDetectionResult>,
   *  }>}
   */

  detect(bitmapData) {}
}

/**
 * @implements { BarcodeDetectionInterface }
 */
export class BarcodeDetectionRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!BarcodeDetectionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          BarcodeDetectionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!BarcodeDetectionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !skia_mojom_BitmapN32 } bitmapData
   * @return {!Promise<{
        results: !Array<!BarcodeDetectionResult>,
   *  }>}
   */

  detect(
      bitmapData) {
    return this.proxy.sendMessage(
        0,
        BarcodeDetection_Detect_ParamsSpec.$,
        BarcodeDetection_Detect_ResponseParamsSpec.$,
        [
          bitmapData
        ]);
  }
}

/**
 * An object which receives request messages for the BarcodeDetection
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class BarcodeDetectionReceiver {
  /**
   * @param {!BarcodeDetectionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!BarcodeDetectionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        BarcodeDetectionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!BarcodeDetectionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        BarcodeDetection_Detect_ParamsSpec.$,
        BarcodeDetection_Detect_ResponseParamsSpec.$,
        impl.detect.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class BarcodeDetection {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "shape_detection.mojom.BarcodeDetection";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!BarcodeDetectionRemote}
   */
  static getRemote() {
    let remote = new BarcodeDetectionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the BarcodeDetection
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class BarcodeDetectionCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      BarcodeDetectionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!BarcodeDetectionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.detect =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        BarcodeDetection_Detect_ParamsSpec.$,
        BarcodeDetection_Detect_ResponseParamsSpec.$,
        this.detect.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const BarcodeDetectionResultSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const BarcodeDetection_Detect_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const BarcodeDetection_Detect_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    BarcodeDetectionResultSpec.$,
    'BarcodeDetectionResult',
    [
      mojo.internal.StructField(
        'rawValue', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'boundingBox', 8,
        0,
        gfx_mojom_RectFSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'format', 16,
        0,
        BarcodeFormatSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'cornerPoints', 24,
        0,
        mojo.internal.Array(gfx_mojom_PointFSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 40],]);



/**
 * @record
 */
export class BarcodeDetectionResult {
  constructor() {
    /** @type { !string } */
    this.rawValue;
    /** @type { !gfx_mojom_RectF } */
    this.boundingBox;
    /** @type { !BarcodeFormat } */
    this.format;
    /** @type { !Array<!gfx_mojom_PointF> } */
    this.cornerPoints;
  }
}



mojo.internal.Struct(
    BarcodeDetection_Detect_ParamsSpec.$,
    'BarcodeDetection_Detect_Params',
    [
      mojo.internal.StructField(
        'bitmapData', 0,
        0,
        skia_mojom_BitmapN32Spec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class BarcodeDetection_Detect_Params {
  constructor() {
    /** @type { !skia_mojom_BitmapN32 } */
    this.bitmapData;
  }
}



mojo.internal.Struct(
    BarcodeDetection_Detect_ResponseParamsSpec.$,
    'BarcodeDetection_Detect_ResponseParams',
    [
      mojo.internal.StructField(
        'results', 0,
        0,
        mojo.internal.Array(BarcodeDetectionResultSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class BarcodeDetection_Detect_ResponseParams {
  constructor() {
    /** @type { !Array<!BarcodeDetectionResult> } */
    this.results;
  }
}

