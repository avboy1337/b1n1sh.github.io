// services/shape_detection/public/mojom/barcodedetection_provider.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('shapeDetection.mojom.BarcodeFormat');
goog.require('shapeDetection.mojom.BarcodeDetection');






goog.provide('shapeDetection.mojom.BarcodeDetectionProvider');
goog.provide('shapeDetection.mojom.BarcodeDetectionProviderReceiver');
goog.provide('shapeDetection.mojom.BarcodeDetectionProviderCallbackRouter');
goog.provide('shapeDetection.mojom.BarcodeDetectionProviderInterface');
goog.provide('shapeDetection.mojom.BarcodeDetectionProviderRemote');
goog.provide('shapeDetection.mojom.BarcodeDetectionProviderPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
shapeDetection.mojom.BarcodeDetectionProviderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        shapeDetection.mojom.BarcodeDetectionProvider.$interfaceName,
        scope);
  }
};

/** @interface */
shapeDetection.mojom.BarcodeDetectionProviderInterface = class {
  
  /**
   * @param { !shapeDetection.mojom.BarcodeDetectionPendingReceiver } receiver
   * @param { !shapeDetection.mojom.BarcodeDetectorOptions } options
   */

  createBarcodeDetection(receiver, options) {}
  
  /**
   * @return {!Promise<{
        supportedFormats: !Array<!shapeDetection.mojom.BarcodeFormat>,
   *  }>}
   */

  enumerateSupportedFormats() {}
};

/**
 * @export
 * @implements { shapeDetection.mojom.BarcodeDetectionProviderInterface }
 */
shapeDetection.mojom.BarcodeDetectionProviderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!shapeDetection.mojom.BarcodeDetectionProviderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          shapeDetection.mojom.BarcodeDetectionProviderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!shapeDetection.mojom.BarcodeDetectionProviderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !shapeDetection.mojom.BarcodeDetectionPendingReceiver } receiver
   * @param { !shapeDetection.mojom.BarcodeDetectorOptions } options
   */

  createBarcodeDetection(
      receiver,
      options) {
    this.proxy.sendMessage(
        0,
        shapeDetection.mojom.BarcodeDetectionProvider_CreateBarcodeDetection_ParamsSpec.$,
        null,
        [
          receiver,
          options
        ]);
  }

  
  /**
   * @return {!Promise<{
        supportedFormats: !Array<!shapeDetection.mojom.BarcodeFormat>,
   *  }>}
   */

  enumerateSupportedFormats() {
    return this.proxy.sendMessage(
        1,
        shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ParamsSpec.$,
        shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the BarcodeDetectionProvider
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
shapeDetection.mojom.BarcodeDetectionProviderReceiver = class {
  /**
   * @param {!shapeDetection.mojom.BarcodeDetectionProviderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!shapeDetection.mojom.BarcodeDetectionProviderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        shapeDetection.mojom.BarcodeDetectionProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!shapeDetection.mojom.BarcodeDetectionProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        shapeDetection.mojom.BarcodeDetectionProvider_CreateBarcodeDetection_ParamsSpec.$,
        null,
        impl.createBarcodeDetection.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ParamsSpec.$,
        shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParamsSpec.$,
        impl.enumerateSupportedFormats.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
shapeDetection.mojom.BarcodeDetectionProvider = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "shape_detection.mojom.BarcodeDetectionProvider";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!shapeDetection.mojom.BarcodeDetectionProviderRemote}
   * @export
   */
  static getRemote() {
    let remote = new shapeDetection.mojom.BarcodeDetectionProviderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the BarcodeDetectionProvider
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
shapeDetection.mojom.BarcodeDetectionProviderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      shapeDetection.mojom.BarcodeDetectionProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!shapeDetection.mojom.BarcodeDetectionProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createBarcodeDetection =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        shapeDetection.mojom.BarcodeDetectionProvider_CreateBarcodeDetection_ParamsSpec.$,
        null,
        this.createBarcodeDetection.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.enumerateSupportedFormats =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ParamsSpec.$,
        shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParamsSpec.$,
        this.enumerateSupportedFormats.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('shapeDetection.mojom.BarcodeDetectorOptionsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
shapeDetection.mojom.BarcodeDetectorOptionsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('shapeDetection.mojom.BarcodeDetectionProvider_CreateBarcodeDetection_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
shapeDetection.mojom.BarcodeDetectionProvider_CreateBarcodeDetection_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    shapeDetection.mojom.BarcodeDetectorOptionsSpec.$,
    'BarcodeDetectorOptions',
    [
      mojo.internal.StructField(
        'formats', 0,
        0,
        mojo.internal.Array(shapeDetection.mojom.BarcodeFormatSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('shapeDetection.mojom.BarcodeDetectorOptions');

/** @record */
shapeDetection.mojom.BarcodeDetectorOptions = class {
  constructor() {
    /** @export { !Array<!shapeDetection.mojom.BarcodeFormat> } */
    this.formats;
  }
};




mojo.internal.Struct(
    shapeDetection.mojom.BarcodeDetectionProvider_CreateBarcodeDetection_ParamsSpec.$,
    'BarcodeDetectionProvider_CreateBarcodeDetection_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.InterfaceRequest(shapeDetection.mojom.BarcodeDetectionPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'options', 8,
        0,
        shapeDetection.mojom.BarcodeDetectorOptionsSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('shapeDetection.mojom.BarcodeDetectionProvider_CreateBarcodeDetection_Params');

/** @record */
shapeDetection.mojom.BarcodeDetectionProvider_CreateBarcodeDetection_Params = class {
  constructor() {
    /** @export { !shapeDetection.mojom.BarcodeDetectionPendingReceiver } */
    this.receiver;
    /** @export { !shapeDetection.mojom.BarcodeDetectorOptions } */
    this.options;
  }
};




mojo.internal.Struct(
    shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ParamsSpec.$,
    'BarcodeDetectionProvider_EnumerateSupportedFormats_Params',
    [
    ],
    [[0, 8],]);



goog.provide('shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_Params');

/** @record */
shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParamsSpec.$,
    'BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParams',
    [
      mojo.internal.StructField(
        'supportedFormats', 0,
        0,
        mojo.internal.Array(shapeDetection.mojom.BarcodeFormatSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParams');

/** @record */
shapeDetection.mojom.BarcodeDetectionProvider_EnumerateSupportedFormats_ResponseParams = class {
  constructor() {
    /** @export { !Array<!shapeDetection.mojom.BarcodeFormat> } */
    this.supportedFormats;
  }
};


