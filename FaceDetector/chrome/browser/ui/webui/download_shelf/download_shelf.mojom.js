// chrome/browser/ui/webui/download_shelf/download_shelf.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/ui/webui/download_shelf/download_shelf.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('downloadShelf.mojom');
  var file_path$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_path.mojom', '../../../../../mojo/public/mojom/base/file_path.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }


  var DangerType = {};
  DangerType.kNotDangerous = 0;
  DangerType.kDangerousFile = 1;
  DangerType.kDangerousUrl = 2;
  DangerType.kDangerousContent = 3;
  DangerType.kMaybeDangerousContent = 4;
  DangerType.kUncommonContent = 5;
  DangerType.kUserValidated = 6;
  DangerType.kDangerousHost = 7;
  DangerType.kPotentiallyUnwanted = 8;
  DangerType.kAllowListedByPolicy = 9;
  DangerType.kAsyncScanning = 10;
  DangerType.kBlockedPasswordProtected = 11;
  DangerType.kBlockedTooLarge = 12;
  DangerType.kSensitiveContentWarning = 13;
  DangerType.kSensitiveContentBlock = 14;
  DangerType.kDeepScannedSafe = 15;
  DangerType.kDeepScannedOpenedDangerous = 16;
  DangerType.kPromptForScanning = 17;
  DangerType.kBlockedUnsupportedFileType = 18;
  DangerType.kDangerousAccountCompromise = 19;
  DangerType.MIN_VALUE = 0;
  DangerType.MAX_VALUE = 19;

  DangerType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    }
    return false;
  };

  DangerType.toKnownEnumValue = function(value) {
    return value;
  };

  DangerType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var DownloadState = {};
  DownloadState.kComplete = 0;
  DownloadState.kCancelled = 1;
  DownloadState.kInProgress = 2;
  DownloadState.kInterrupted = 3;
  DownloadState.MIN_VALUE = 0;
  DownloadState.MAX_VALUE = 3;

  DownloadState.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  DownloadState.toKnownEnumValue = function(value) {
    return value;
  };

  DownloadState.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var DownloadMode = {};
  DownloadMode.kNormal = 0;
  DownloadMode.kDangerous = 1;
  DownloadMode.kMalicious = 2;
  DownloadMode.kMixedContentWarn = 3;
  DownloadMode.kMixedContentBlock = 4;
  DownloadMode.kDeepScanning = 5;
  DownloadMode.MIN_VALUE = 0;
  DownloadMode.MAX_VALUE = 5;

  DownloadMode.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    }
    return false;
  };

  DownloadMode.toKnownEnumValue = function(value) {
    return value;
  };

  DownloadMode.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var MixedContentStatus = {};
  MixedContentStatus.kUnknown = 0;
  MixedContentStatus.kSafe = 1;
  MixedContentStatus.kValidated = 2;
  MixedContentStatus.kWarn = 3;
  MixedContentStatus.kBlock = 4;
  MixedContentStatus.kSilentBlock = 5;
  MixedContentStatus.MIN_VALUE = 0;
  MixedContentStatus.MAX_VALUE = 5;

  MixedContentStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    }
    return false;
  };

  MixedContentStatus.toKnownEnumValue = function(value) {
    return value;
  };

  MixedContentStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function DownloadItem(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DownloadItem.prototype.initDefaults_ = function() {
    this.allowDownloadFeedback = false;
    this.isDangerous = false;
    this.isPaused = false;
    this.isMalicious = false;
    this.shouldOpenWhenComplete = false;
    this.shouldPromoteOrigin = false;
    this.dangerType = 0;
    this.fileNameDisplayString = null;
    this.id = 0;
    this.mixedContentStatus = 0;
    this.mode = 0;
    this.state = 0;
    this.originalUrl = null;
    this.receivedBytes = 0;
    this.showDownloadStartTime = 0;
    this.statusText = null;
    this.targetFilePath = null;
    this.tooltipText = null;
    this.totalBytes = 0;
    this.warningConfirmButtonText = null;
    this.warningText = null;
  };
  DownloadItem.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DownloadItem.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 112}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate DownloadItem.dangerType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, DangerType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DownloadItem.fileNameDisplayString
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;






    // validate DownloadItem.mixedContentStatus
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 20, MixedContentStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DownloadItem.mode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 24, DownloadMode);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DownloadItem.originalUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;






    // validate DownloadItem.state
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 28, DownloadState);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DownloadItem.statusText
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 56, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DownloadItem.targetFilePath
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, file_path$.FilePath, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DownloadItem.tooltipText
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 72, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate DownloadItem.warningConfirmButtonText
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 88, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DownloadItem.warningText
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 96, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DownloadItem.encodedSize = codec.kStructHeaderSize + 104;

  DownloadItem.decode = function(decoder) {
    var packed;
    var val = new DownloadItem();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.allowDownloadFeedback = (packed >> 0) & 1 ? true : false;
    val.isDangerous = (packed >> 1) & 1 ? true : false;
    val.isPaused = (packed >> 2) & 1 ? true : false;
    val.isMalicious = (packed >> 3) & 1 ? true : false;
    val.shouldOpenWhenComplete = (packed >> 4) & 1 ? true : false;
    val.shouldPromoteOrigin = (packed >> 5) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.dangerType =
        decoder.decodeStruct(new codec.Enum(DangerType));
    val.fileNameDisplayString =
        decoder.decodeStruct(codec.String);
    val.id =
        decoder.decodeStruct(codec.Uint32);
    val.mixedContentStatus =
        decoder.decodeStruct(new codec.Enum(MixedContentStatus));
    val.mode =
        decoder.decodeStruct(new codec.Enum(DownloadMode));
    val.state =
        decoder.decodeStruct(new codec.Enum(DownloadState));
    val.originalUrl =
        decoder.decodeStructPointer(url$.Url);
    val.receivedBytes =
        decoder.decodeStruct(codec.Int64);
    val.showDownloadStartTime =
        decoder.decodeStruct(codec.Double);
    val.statusText =
        decoder.decodeStruct(codec.String);
    val.targetFilePath =
        decoder.decodeStructPointer(file_path$.FilePath);
    val.tooltipText =
        decoder.decodeStruct(codec.String);
    val.totalBytes =
        decoder.decodeStruct(codec.Int64);
    val.warningConfirmButtonText =
        decoder.decodeStruct(codec.String);
    val.warningText =
        decoder.decodeStruct(codec.String);
    return val;
  };

  DownloadItem.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DownloadItem.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.allowDownloadFeedback & 1) << 0
    packed |= (val.isDangerous & 1) << 1
    packed |= (val.isPaused & 1) << 2
    packed |= (val.isMalicious & 1) << 3
    packed |= (val.shouldOpenWhenComplete & 1) << 4
    packed |= (val.shouldPromoteOrigin & 1) << 5
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.dangerType);
    encoder.encodeStruct(codec.String, val.fileNameDisplayString);
    encoder.encodeStruct(codec.Uint32, val.id);
    encoder.encodeStruct(codec.Int32, val.mixedContentStatus);
    encoder.encodeStruct(codec.Int32, val.mode);
    encoder.encodeStruct(codec.Int32, val.state);
    encoder.encodeStructPointer(url$.Url, val.originalUrl);
    encoder.encodeStruct(codec.Int64, val.receivedBytes);
    encoder.encodeStruct(codec.Double, val.showDownloadStartTime);
    encoder.encodeStruct(codec.String, val.statusText);
    encoder.encodeStructPointer(file_path$.FilePath, val.targetFilePath);
    encoder.encodeStruct(codec.String, val.tooltipText);
    encoder.encodeStruct(codec.Int64, val.totalBytes);
    encoder.encodeStruct(codec.String, val.warningConfirmButtonText);
    encoder.encodeStruct(codec.String, val.warningText);
  };
  function PageHandlerFactory_CreatePageHandler_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandlerFactory_CreatePageHandler_Params.prototype.initDefaults_ = function() {
    this.page = new PagePtr();
    this.handler = new bindings.InterfaceRequest();
  };
  PageHandlerFactory_CreatePageHandler_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandlerFactory_CreatePageHandler_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandlerFactory_CreatePageHandler_Params.page
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandlerFactory_CreatePageHandler_Params.handler
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandlerFactory_CreatePageHandler_Params.encodedSize = codec.kStructHeaderSize + 16;

  PageHandlerFactory_CreatePageHandler_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandlerFactory_CreatePageHandler_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.page =
        decoder.decodeStruct(new codec.Interface(PagePtr));
    val.handler =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandlerFactory_CreatePageHandler_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandlerFactory_CreatePageHandler_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(PagePtr), val.page);
    encoder.encodeStruct(codec.InterfaceRequest, val.handler);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_DoShowAll_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_DoShowAll_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_DoShowAll_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_DoShowAll_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_DoShowAll_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_DoShowAll_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_DoShowAll_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_DoShowAll_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_DoShowAll_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_DoClose_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_DoClose_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_DoClose_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_DoClose_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_DoClose_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_DoClose_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_DoClose_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_DoClose_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_DoClose_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_DiscardDownload_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_DiscardDownload_Params.prototype.initDefaults_ = function() {
    this.downloadId = 0;
  };
  PageHandler_DiscardDownload_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_DiscardDownload_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_DiscardDownload_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_DiscardDownload_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_DiscardDownload_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.downloadId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_DiscardDownload_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_DiscardDownload_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.downloadId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_KeepDownload_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_KeepDownload_Params.prototype.initDefaults_ = function() {
    this.downloadId = 0;
  };
  PageHandler_KeepDownload_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_KeepDownload_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_KeepDownload_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_KeepDownload_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_KeepDownload_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.downloadId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_KeepDownload_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_KeepDownload_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.downloadId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_GetDownloads_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetDownloads_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_GetDownloads_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetDownloads_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetDownloads_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_GetDownloads_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetDownloads_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_GetDownloads_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetDownloads_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_GetDownloads_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetDownloads_ResponseParams.prototype.initDefaults_ = function() {
    this.downloadItems = null;
  };
  PageHandler_GetDownloads_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetDownloads_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetDownloads_ResponseParams.downloadItems
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(DownloadItem), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetDownloads_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetDownloads_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetDownloads_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.downloadItems =
        decoder.decodeArrayPointer(new codec.PointerTo(DownloadItem));
    return val;
  };

  PageHandler_GetDownloads_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetDownloads_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(DownloadItem), val.downloadItems);
  };
  function PageHandler_ShowContextMenu_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ShowContextMenu_Params.prototype.initDefaults_ = function() {
    this.downloadId = 0;
    this.clientX = 0;
    this.clientY = 0;
    this.timestamp = 0;
  };
  PageHandler_ShowContextMenu_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ShowContextMenu_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;





    return validator.validationError.NONE;
  };

  PageHandler_ShowContextMenu_Params.encodedSize = codec.kStructHeaderSize + 24;

  PageHandler_ShowContextMenu_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ShowContextMenu_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.downloadId =
        decoder.decodeStruct(codec.Uint32);
    val.clientX =
        decoder.decodeStruct(codec.Int32);
    val.clientY =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.timestamp =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  PageHandler_ShowContextMenu_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ShowContextMenu_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.downloadId);
    encoder.encodeStruct(codec.Int32, val.clientX);
    encoder.encodeStruct(codec.Int32, val.clientY);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Double, val.timestamp);
  };
  function PageHandler_OpenDownload_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OpenDownload_Params.prototype.initDefaults_ = function() {
    this.downloadId = 0;
  };
  PageHandler_OpenDownload_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OpenDownload_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_OpenDownload_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_OpenDownload_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OpenDownload_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.downloadId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_OpenDownload_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OpenDownload_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.downloadId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Page_OnNewDownload_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_OnNewDownload_Params.prototype.initDefaults_ = function() {
    this.downloadItem = null;
  };
  Page_OnNewDownload_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_OnNewDownload_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Page_OnNewDownload_Params.downloadItem
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DownloadItem, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_OnNewDownload_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_OnNewDownload_Params.decode = function(decoder) {
    var packed;
    var val = new Page_OnNewDownload_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.downloadItem =
        decoder.decodeStructPointer(DownloadItem);
    return val;
  };

  Page_OnNewDownload_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_OnNewDownload_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DownloadItem, val.downloadItem);
  };
  function Page_OnDownloadOpened_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_OnDownloadOpened_Params.prototype.initDefaults_ = function() {
    this.downloadId = 0;
  };
  Page_OnDownloadOpened_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_OnDownloadOpened_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Page_OnDownloadOpened_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_OnDownloadOpened_Params.decode = function(decoder) {
    var packed;
    var val = new Page_OnDownloadOpened_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.downloadId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Page_OnDownloadOpened_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_OnDownloadOpened_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.downloadId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Page_OnDownloadUpdated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_OnDownloadUpdated_Params.prototype.initDefaults_ = function() {
    this.downloadItem = null;
  };
  Page_OnDownloadUpdated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_OnDownloadUpdated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Page_OnDownloadUpdated_Params.downloadItem
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DownloadItem, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_OnDownloadUpdated_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_OnDownloadUpdated_Params.decode = function(decoder) {
    var packed;
    var val = new Page_OnDownloadUpdated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.downloadItem =
        decoder.decodeStructPointer(DownloadItem);
    return val;
  };

  Page_OnDownloadUpdated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_OnDownloadUpdated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DownloadItem, val.downloadItem);
  };
  function Page_OnDownloadErased_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_OnDownloadErased_Params.prototype.initDefaults_ = function() {
    this.downloadId = 0;
  };
  Page_OnDownloadErased_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_OnDownloadErased_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Page_OnDownloadErased_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_OnDownloadErased_Params.decode = function(decoder) {
    var packed;
    var val = new Page_OnDownloadErased_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.downloadId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Page_OnDownloadErased_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_OnDownloadErased_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.downloadId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kPageHandlerFactory_CreatePageHandler_Name = 445910499;

  function PageHandlerFactoryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PageHandlerFactory,
                                                   handleOrPtrInfo);
  }

  function PageHandlerFactoryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PageHandlerFactory, associatedInterfacePtrInfo);
  }

  PageHandlerFactoryAssociatedPtr.prototype =
      Object.create(PageHandlerFactoryPtr.prototype);
  PageHandlerFactoryAssociatedPtr.prototype.constructor =
      PageHandlerFactoryAssociatedPtr;

  function PageHandlerFactoryProxy(receiver) {
    this.receiver_ = receiver;
  }
  PageHandlerFactoryPtr.prototype.createPageHandler = function() {
    return PageHandlerFactoryProxy.prototype.createPageHandler
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerFactoryProxy.prototype.createPageHandler = function(page, handler) {
    var params_ = new PageHandlerFactory_CreatePageHandler_Params();
    params_.page = page;
    params_.handler = handler;
    var builder = new codec.MessageV0Builder(
        kPageHandlerFactory_CreatePageHandler_Name,
        codec.align(PageHandlerFactory_CreatePageHandler_Params.encodedSize));
    builder.encodeStruct(PageHandlerFactory_CreatePageHandler_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageHandlerFactoryStub(delegate) {
    this.delegate_ = delegate;
  }
  PageHandlerFactoryStub.prototype.createPageHandler = function(page, handler) {
    return this.delegate_ && this.delegate_.createPageHandler && this.delegate_.createPageHandler(page, handler);
  }

  PageHandlerFactoryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandlerFactory_CreatePageHandler_Name:
      var params = reader.decodeStruct(PageHandlerFactory_CreatePageHandler_Params);
      this.createPageHandler(params.page, params.handler);
      return true;
    default:
      return false;
    }
  };

  PageHandlerFactoryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePageHandlerFactoryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPageHandlerFactory_CreatePageHandler_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandlerFactory_CreatePageHandler_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageHandlerFactoryResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PageHandlerFactory = {
    name: 'download_shelf.mojom.PageHandlerFactory',
    kVersion: 0,
    ptrClass: PageHandlerFactoryPtr,
    proxyClass: PageHandlerFactoryProxy,
    stubClass: PageHandlerFactoryStub,
    validateRequest: validatePageHandlerFactoryRequest,
    validateResponse: null,
  };
  PageHandlerFactoryStub.prototype.validator = validatePageHandlerFactoryRequest;
  PageHandlerFactoryProxy.prototype.validator = null;
  var kPageHandler_DoShowAll_Name = 1298547416;
  var kPageHandler_DoClose_Name = 1962586384;
  var kPageHandler_DiscardDownload_Name = 1718134429;
  var kPageHandler_KeepDownload_Name = 1770514989;
  var kPageHandler_GetDownloads_Name = 1004344447;
  var kPageHandler_ShowContextMenu_Name = 1016706116;
  var kPageHandler_OpenDownload_Name = 1532274342;

  function PageHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PageHandler,
                                                   handleOrPtrInfo);
  }

  function PageHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PageHandler, associatedInterfacePtrInfo);
  }

  PageHandlerAssociatedPtr.prototype =
      Object.create(PageHandlerPtr.prototype);
  PageHandlerAssociatedPtr.prototype.constructor =
      PageHandlerAssociatedPtr;

  function PageHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  PageHandlerPtr.prototype.doShowAll = function() {
    return PageHandlerProxy.prototype.doShowAll
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.doShowAll = function() {
    var params_ = new PageHandler_DoShowAll_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_DoShowAll_Name,
        codec.align(PageHandler_DoShowAll_Params.encodedSize));
    builder.encodeStruct(PageHandler_DoShowAll_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.doClose = function() {
    return PageHandlerProxy.prototype.doClose
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.doClose = function() {
    var params_ = new PageHandler_DoClose_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_DoClose_Name,
        codec.align(PageHandler_DoClose_Params.encodedSize));
    builder.encodeStruct(PageHandler_DoClose_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.discardDownload = function() {
    return PageHandlerProxy.prototype.discardDownload
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.discardDownload = function(downloadId) {
    var params_ = new PageHandler_DiscardDownload_Params();
    params_.downloadId = downloadId;
    var builder = new codec.MessageV0Builder(
        kPageHandler_DiscardDownload_Name,
        codec.align(PageHandler_DiscardDownload_Params.encodedSize));
    builder.encodeStruct(PageHandler_DiscardDownload_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.keepDownload = function() {
    return PageHandlerProxy.prototype.keepDownload
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.keepDownload = function(downloadId) {
    var params_ = new PageHandler_KeepDownload_Params();
    params_.downloadId = downloadId;
    var builder = new codec.MessageV0Builder(
        kPageHandler_KeepDownload_Name,
        codec.align(PageHandler_KeepDownload_Params.encodedSize));
    builder.encodeStruct(PageHandler_KeepDownload_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.getDownloads = function() {
    return PageHandlerProxy.prototype.getDownloads
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getDownloads = function() {
    var params_ = new PageHandler_GetDownloads_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetDownloads_Name,
          codec.align(PageHandler_GetDownloads_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetDownloads_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetDownloads_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.showContextMenu = function() {
    return PageHandlerProxy.prototype.showContextMenu
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.showContextMenu = function(downloadId, clientX, clientY, timestamp) {
    var params_ = new PageHandler_ShowContextMenu_Params();
    params_.downloadId = downloadId;
    params_.clientX = clientX;
    params_.clientY = clientY;
    params_.timestamp = timestamp;
    var builder = new codec.MessageV0Builder(
        kPageHandler_ShowContextMenu_Name,
        codec.align(PageHandler_ShowContextMenu_Params.encodedSize));
    builder.encodeStruct(PageHandler_ShowContextMenu_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.openDownload = function() {
    return PageHandlerProxy.prototype.openDownload
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.openDownload = function(downloadId) {
    var params_ = new PageHandler_OpenDownload_Params();
    params_.downloadId = downloadId;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OpenDownload_Name,
        codec.align(PageHandler_OpenDownload_Params.encodedSize));
    builder.encodeStruct(PageHandler_OpenDownload_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  PageHandlerStub.prototype.doShowAll = function() {
    return this.delegate_ && this.delegate_.doShowAll && this.delegate_.doShowAll();
  }
  PageHandlerStub.prototype.doClose = function() {
    return this.delegate_ && this.delegate_.doClose && this.delegate_.doClose();
  }
  PageHandlerStub.prototype.discardDownload = function(downloadId) {
    return this.delegate_ && this.delegate_.discardDownload && this.delegate_.discardDownload(downloadId);
  }
  PageHandlerStub.prototype.keepDownload = function(downloadId) {
    return this.delegate_ && this.delegate_.keepDownload && this.delegate_.keepDownload(downloadId);
  }
  PageHandlerStub.prototype.getDownloads = function() {
    return this.delegate_ && this.delegate_.getDownloads && this.delegate_.getDownloads();
  }
  PageHandlerStub.prototype.showContextMenu = function(downloadId, clientX, clientY, timestamp) {
    return this.delegate_ && this.delegate_.showContextMenu && this.delegate_.showContextMenu(downloadId, clientX, clientY, timestamp);
  }
  PageHandlerStub.prototype.openDownload = function(downloadId) {
    return this.delegate_ && this.delegate_.openDownload && this.delegate_.openDownload(downloadId);
  }

  PageHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandler_DoShowAll_Name:
      var params = reader.decodeStruct(PageHandler_DoShowAll_Params);
      this.doShowAll();
      return true;
    case kPageHandler_DoClose_Name:
      var params = reader.decodeStruct(PageHandler_DoClose_Params);
      this.doClose();
      return true;
    case kPageHandler_DiscardDownload_Name:
      var params = reader.decodeStruct(PageHandler_DiscardDownload_Params);
      this.discardDownload(params.downloadId);
      return true;
    case kPageHandler_KeepDownload_Name:
      var params = reader.decodeStruct(PageHandler_KeepDownload_Params);
      this.keepDownload(params.downloadId);
      return true;
    case kPageHandler_ShowContextMenu_Name:
      var params = reader.decodeStruct(PageHandler_ShowContextMenu_Params);
      this.showContextMenu(params.downloadId, params.clientX, params.clientY, params.timestamp);
      return true;
    case kPageHandler_OpenDownload_Name:
      var params = reader.decodeStruct(PageHandler_OpenDownload_Params);
      this.openDownload(params.downloadId);
      return true;
    default:
      return false;
    }
  };

  PageHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandler_GetDownloads_Name:
      var params = reader.decodeStruct(PageHandler_GetDownloads_Params);
      this.getDownloads().then(function(response) {
        var responseParams =
            new PageHandler_GetDownloads_ResponseParams();
        responseParams.downloadItems = response.downloadItems;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetDownloads_Name,
            codec.align(PageHandler_GetDownloads_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetDownloads_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePageHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPageHandler_DoShowAll_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_DoShowAll_Params;
      break;
      case kPageHandler_DoClose_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_DoClose_Params;
      break;
      case kPageHandler_DiscardDownload_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_DiscardDownload_Params;
      break;
      case kPageHandler_KeepDownload_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_KeepDownload_Params;
      break;
      case kPageHandler_GetDownloads_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetDownloads_Params;
      break;
      case kPageHandler_ShowContextMenu_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_ShowContextMenu_Params;
      break;
      case kPageHandler_OpenDownload_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OpenDownload_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageHandlerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPageHandler_GetDownloads_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetDownloads_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PageHandler = {
    name: 'download_shelf.mojom.PageHandler',
    kVersion: 0,
    ptrClass: PageHandlerPtr,
    proxyClass: PageHandlerProxy,
    stubClass: PageHandlerStub,
    validateRequest: validatePageHandlerRequest,
    validateResponse: validatePageHandlerResponse,
  };
  PageHandlerStub.prototype.validator = validatePageHandlerRequest;
  PageHandlerProxy.prototype.validator = validatePageHandlerResponse;
  var kPage_OnNewDownload_Name = 1002832096;
  var kPage_OnDownloadOpened_Name = 2119873422;
  var kPage_OnDownloadUpdated_Name = 196448256;
  var kPage_OnDownloadErased_Name = 772908856;

  function PagePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Page,
                                                   handleOrPtrInfo);
  }

  function PageAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Page, associatedInterfacePtrInfo);
  }

  PageAssociatedPtr.prototype =
      Object.create(PagePtr.prototype);
  PageAssociatedPtr.prototype.constructor =
      PageAssociatedPtr;

  function PageProxy(receiver) {
    this.receiver_ = receiver;
  }
  PagePtr.prototype.onNewDownload = function() {
    return PageProxy.prototype.onNewDownload
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.onNewDownload = function(downloadItem) {
    var params_ = new Page_OnNewDownload_Params();
    params_.downloadItem = downloadItem;
    var builder = new codec.MessageV0Builder(
        kPage_OnNewDownload_Name,
        codec.align(Page_OnNewDownload_Params.encodedSize));
    builder.encodeStruct(Page_OnNewDownload_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.onDownloadOpened = function() {
    return PageProxy.prototype.onDownloadOpened
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.onDownloadOpened = function(downloadId) {
    var params_ = new Page_OnDownloadOpened_Params();
    params_.downloadId = downloadId;
    var builder = new codec.MessageV0Builder(
        kPage_OnDownloadOpened_Name,
        codec.align(Page_OnDownloadOpened_Params.encodedSize));
    builder.encodeStruct(Page_OnDownloadOpened_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.onDownloadUpdated = function() {
    return PageProxy.prototype.onDownloadUpdated
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.onDownloadUpdated = function(downloadItem) {
    var params_ = new Page_OnDownloadUpdated_Params();
    params_.downloadItem = downloadItem;
    var builder = new codec.MessageV0Builder(
        kPage_OnDownloadUpdated_Name,
        codec.align(Page_OnDownloadUpdated_Params.encodedSize));
    builder.encodeStruct(Page_OnDownloadUpdated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.onDownloadErased = function() {
    return PageProxy.prototype.onDownloadErased
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.onDownloadErased = function(downloadId) {
    var params_ = new Page_OnDownloadErased_Params();
    params_.downloadId = downloadId;
    var builder = new codec.MessageV0Builder(
        kPage_OnDownloadErased_Name,
        codec.align(Page_OnDownloadErased_Params.encodedSize));
    builder.encodeStruct(Page_OnDownloadErased_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageStub(delegate) {
    this.delegate_ = delegate;
  }
  PageStub.prototype.onNewDownload = function(downloadItem) {
    return this.delegate_ && this.delegate_.onNewDownload && this.delegate_.onNewDownload(downloadItem);
  }
  PageStub.prototype.onDownloadOpened = function(downloadId) {
    return this.delegate_ && this.delegate_.onDownloadOpened && this.delegate_.onDownloadOpened(downloadId);
  }
  PageStub.prototype.onDownloadUpdated = function(downloadItem) {
    return this.delegate_ && this.delegate_.onDownloadUpdated && this.delegate_.onDownloadUpdated(downloadItem);
  }
  PageStub.prototype.onDownloadErased = function(downloadId) {
    return this.delegate_ && this.delegate_.onDownloadErased && this.delegate_.onDownloadErased(downloadId);
  }

  PageStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPage_OnNewDownload_Name:
      var params = reader.decodeStruct(Page_OnNewDownload_Params);
      this.onNewDownload(params.downloadItem);
      return true;
    case kPage_OnDownloadOpened_Name:
      var params = reader.decodeStruct(Page_OnDownloadOpened_Params);
      this.onDownloadOpened(params.downloadId);
      return true;
    case kPage_OnDownloadUpdated_Name:
      var params = reader.decodeStruct(Page_OnDownloadUpdated_Params);
      this.onDownloadUpdated(params.downloadItem);
      return true;
    case kPage_OnDownloadErased_Name:
      var params = reader.decodeStruct(Page_OnDownloadErased_Params);
      this.onDownloadErased(params.downloadId);
      return true;
    default:
      return false;
    }
  };

  PageStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePageRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPage_OnNewDownload_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_OnNewDownload_Params;
      break;
      case kPage_OnDownloadOpened_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_OnDownloadOpened_Params;
      break;
      case kPage_OnDownloadUpdated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_OnDownloadUpdated_Params;
      break;
      case kPage_OnDownloadErased_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_OnDownloadErased_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Page = {
    name: 'download_shelf.mojom.Page',
    kVersion: 0,
    ptrClass: PagePtr,
    proxyClass: PageProxy,
    stubClass: PageStub,
    validateRequest: validatePageRequest,
    validateResponse: null,
  };
  PageStub.prototype.validator = validatePageRequest;
  PageProxy.prototype.validator = null;
  exports.DangerType = DangerType;
  exports.DownloadState = DownloadState;
  exports.DownloadMode = DownloadMode;
  exports.MixedContentStatus = MixedContentStatus;
  exports.DownloadItem = DownloadItem;
  exports.PageHandlerFactory = PageHandlerFactory;
  exports.PageHandlerFactoryPtr = PageHandlerFactoryPtr;
  exports.PageHandlerFactoryAssociatedPtr = PageHandlerFactoryAssociatedPtr;
  exports.PageHandler = PageHandler;
  exports.PageHandlerPtr = PageHandlerPtr;
  exports.PageHandlerAssociatedPtr = PageHandlerAssociatedPtr;
  exports.Page = Page;
  exports.PagePtr = PagePtr;
  exports.PageAssociatedPtr = PageAssociatedPtr;
})();