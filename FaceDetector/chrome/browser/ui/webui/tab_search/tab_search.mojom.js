// chrome/browser/ui/webui/tab_search/tab_search.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/ui/webui/tab_search/tab_search.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('tabSearch.mojom');
  var tab_group_types$ =
      mojo.internal.exposeNamespace('tabGroups.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/tab_groups/public/mojom/tab_group_types.mojom', '../../../../../components/tab_groups/public/mojom/tab_group_types.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/token.mojom', '../../../../../mojo/public/mojom/base/token.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function ProfileData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProfileData.prototype.initDefaults_ = function() {
    this.windows = null;
    this.tabGroups = null;
    this.recentlyClosedTabs = null;
    this.recentlyClosedTabGroups = null;
    this.recentlyClosedSectionExpanded = false;
  };
  ProfileData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProfileData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ProfileData.windows
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(Window), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ProfileData.tabGroups
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(TabGroup), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ProfileData.recentlyClosedTabs
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(RecentlyClosedTab), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ProfileData.recentlyClosedTabGroups
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 8, new codec.PointerTo(RecentlyClosedTabGroup), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ProfileData.encodedSize = codec.kStructHeaderSize + 40;

  ProfileData.decode = function(decoder) {
    var packed;
    var val = new ProfileData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.windows =
        decoder.decodeArrayPointer(new codec.PointerTo(Window));
    val.tabGroups =
        decoder.decodeArrayPointer(new codec.PointerTo(TabGroup));
    val.recentlyClosedTabs =
        decoder.decodeArrayPointer(new codec.PointerTo(RecentlyClosedTab));
    val.recentlyClosedTabGroups =
        decoder.decodeArrayPointer(new codec.PointerTo(RecentlyClosedTabGroup));
    packed = decoder.readUint8();
    val.recentlyClosedSectionExpanded = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ProfileData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProfileData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(Window), val.windows);
    encoder.encodeArrayPointer(new codec.PointerTo(TabGroup), val.tabGroups);
    encoder.encodeArrayPointer(new codec.PointerTo(RecentlyClosedTab), val.recentlyClosedTabs);
    encoder.encodeArrayPointer(new codec.PointerTo(RecentlyClosedTabGroup), val.recentlyClosedTabGroups);
    packed = 0;
    packed |= (val.recentlyClosedSectionExpanded & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Window(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Window.prototype.initDefaults_ = function() {
    this.active = false;
    this.height = 0;
    this.tabs = null;
  };
  Window.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Window.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate Window.tabs
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(Tab), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Window.encodedSize = codec.kStructHeaderSize + 16;

  Window.decode = function(decoder) {
    var packed;
    var val = new Window();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.active = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.height =
        decoder.decodeStruct(codec.Uint32);
    val.tabs =
        decoder.decodeArrayPointer(new codec.PointerTo(Tab));
    return val;
  };

  Window.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Window.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.active & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint32, val.height);
    encoder.encodeArrayPointer(new codec.PointerTo(Tab), val.tabs);
  };
  function Tab(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Tab.prototype.initDefaults_ = function() {
    this.active = false;
    this.pinned = false;
    this.isDefaultFavicon = false;
    this.showIcon = false;
    this.index = 0;
    this.tabId = 0;
    this.groupId = null;
    this.title = null;
    this.url = null;
    this.faviconUrl = null;
    this.lastActiveTimeTicks = null;
    this.lastActiveElapsedText = null;
  };
  Tab.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Tab.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 72}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;





    // validate Tab.groupId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, token$.Token, true);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Tab.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Tab.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Tab.faviconUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;




    // validate Tab.lastActiveTimeTicks
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Tab.lastActiveElapsedText
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 56, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Tab.encodedSize = codec.kStructHeaderSize + 64;

  Tab.decode = function(decoder) {
    var packed;
    var val = new Tab();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.active = (packed >> 0) & 1 ? true : false;
    val.pinned = (packed >> 1) & 1 ? true : false;
    val.isDefaultFavicon = (packed >> 2) & 1 ? true : false;
    val.showIcon = (packed >> 3) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.index =
        decoder.decodeStruct(codec.Int32);
    val.tabId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.groupId =
        decoder.decodeStructPointer(token$.Token);
    val.title =
        decoder.decodeStruct(codec.String);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.faviconUrl =
        decoder.decodeStructPointer(url$.Url);
    val.lastActiveTimeTicks =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.lastActiveElapsedText =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Tab.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Tab.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.active & 1) << 0
    packed |= (val.pinned & 1) << 1
    packed |= (val.isDefaultFavicon & 1) << 2
    packed |= (val.showIcon & 1) << 3
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.index);
    encoder.encodeStruct(codec.Int32, val.tabId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(token$.Token, val.groupId);
    encoder.encodeStruct(codec.String, val.title);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(url$.Url, val.faviconUrl);
    encoder.encodeStructPointer(time$.TimeTicks, val.lastActiveTimeTicks);
    encoder.encodeStruct(codec.String, val.lastActiveElapsedText);
  };
  function RecentlyClosedTab(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RecentlyClosedTab.prototype.initDefaults_ = function() {
    this.tabId = 0;
    this.groupId = null;
    this.title = null;
    this.url = null;
    this.lastActiveTime = null;
    this.lastActiveElapsedText = null;
  };
  RecentlyClosedTab.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RecentlyClosedTab.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate RecentlyClosedTab.groupId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, token$.Token, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RecentlyClosedTab.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate RecentlyClosedTab.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RecentlyClosedTab.lastActiveTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RecentlyClosedTab.lastActiveElapsedText
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RecentlyClosedTab.encodedSize = codec.kStructHeaderSize + 48;

  RecentlyClosedTab.decode = function(decoder) {
    var packed;
    var val = new RecentlyClosedTab();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tabId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.groupId =
        decoder.decodeStructPointer(token$.Token);
    val.title =
        decoder.decodeStruct(codec.String);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.lastActiveTime =
        decoder.decodeStructPointer(time$.Time);
    val.lastActiveElapsedText =
        decoder.decodeStruct(codec.String);
    return val;
  };

  RecentlyClosedTab.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RecentlyClosedTab.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.tabId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(token$.Token, val.groupId);
    encoder.encodeStruct(codec.String, val.title);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(time$.Time, val.lastActiveTime);
    encoder.encodeStruct(codec.String, val.lastActiveElapsedText);
  };
  function TabGroup(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TabGroup.prototype.initDefaults_ = function() {
    this.id = null;
    this.color = 0;
    this.title = null;
  };
  TabGroup.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TabGroup.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TabGroup.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, token$.Token, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TabGroup.color
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, tab_group_types$.Color);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TabGroup.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TabGroup.encodedSize = codec.kStructHeaderSize + 24;

  TabGroup.decode = function(decoder) {
    var packed;
    var val = new TabGroup();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(token$.Token);
    val.color =
        decoder.decodeStruct(new codec.Enum(tab_group_types$.Color));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.title =
        decoder.decodeStruct(codec.String);
    return val;
  };

  TabGroup.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TabGroup.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(token$.Token, val.id);
    encoder.encodeStruct(codec.Int32, val.color);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.title);
  };
  function RecentlyClosedTabGroup(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RecentlyClosedTabGroup.prototype.initDefaults_ = function() {
    this.sessionId = 0;
    this.color = 0;
    this.id = null;
    this.title = null;
    this.tabCount = 0;
    this.lastActiveTime = null;
    this.lastActiveElapsedText = null;
  };
  RecentlyClosedTabGroup.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RecentlyClosedTabGroup.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate RecentlyClosedTabGroup.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, token$.Token, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RecentlyClosedTabGroup.color
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, tab_group_types$.Color);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RecentlyClosedTabGroup.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate RecentlyClosedTabGroup.lastActiveTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RecentlyClosedTabGroup.lastActiveElapsedText
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RecentlyClosedTabGroup.encodedSize = codec.kStructHeaderSize + 48;

  RecentlyClosedTabGroup.decode = function(decoder) {
    var packed;
    var val = new RecentlyClosedTabGroup();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sessionId =
        decoder.decodeStruct(codec.Int32);
    val.color =
        decoder.decodeStruct(new codec.Enum(tab_group_types$.Color));
    val.id =
        decoder.decodeStructPointer(token$.Token);
    val.title =
        decoder.decodeStruct(codec.String);
    val.tabCount =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.lastActiveTime =
        decoder.decodeStructPointer(time$.Time);
    val.lastActiveElapsedText =
        decoder.decodeStruct(codec.String);
    return val;
  };

  RecentlyClosedTabGroup.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RecentlyClosedTabGroup.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.sessionId);
    encoder.encodeStruct(codec.Int32, val.color);
    encoder.encodeStructPointer(token$.Token, val.id);
    encoder.encodeStruct(codec.String, val.title);
    encoder.encodeStruct(codec.Uint32, val.tabCount);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(time$.Time, val.lastActiveTime);
    encoder.encodeStruct(codec.String, val.lastActiveElapsedText);
  };
  function SwitchToTabInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SwitchToTabInfo.prototype.initDefaults_ = function() {
    this.tabId = 0;
  };
  SwitchToTabInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SwitchToTabInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SwitchToTabInfo.encodedSize = codec.kStructHeaderSize + 8;

  SwitchToTabInfo.decode = function(decoder) {
    var packed;
    var val = new SwitchToTabInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tabId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SwitchToTabInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SwitchToTabInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.tabId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TabUpdateInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TabUpdateInfo.prototype.initDefaults_ = function() {
    this.inActiveWindow = false;
    this.tab = null;
  };
  TabUpdateInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TabUpdateInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate TabUpdateInfo.tab
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, Tab, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TabUpdateInfo.encodedSize = codec.kStructHeaderSize + 16;

  TabUpdateInfo.decode = function(decoder) {
    var packed;
    var val = new TabUpdateInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.inActiveWindow = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.tab =
        decoder.decodeStructPointer(Tab);
    return val;
  };

  TabUpdateInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TabUpdateInfo.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.inActiveWindow & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(Tab, val.tab);
  };
  function PageHandlerFactory_CreatePageHandler_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandlerFactory_CreatePageHandler_Params.prototype.initDefaults_ = function() {
    this.page = new PagePtr();
    this.handler = new bindings.InterfaceRequest();
  };
  PageHandlerFactory_CreatePageHandler_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandlerFactory_CreatePageHandler_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandlerFactory_CreatePageHandler_Params.page
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandlerFactory_CreatePageHandler_Params.handler
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandlerFactory_CreatePageHandler_Params.encodedSize = codec.kStructHeaderSize + 16;

  PageHandlerFactory_CreatePageHandler_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandlerFactory_CreatePageHandler_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.page =
        decoder.decodeStruct(new codec.Interface(PagePtr));
    val.handler =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandlerFactory_CreatePageHandler_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandlerFactory_CreatePageHandler_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(PagePtr), val.page);
    encoder.encodeStruct(codec.InterfaceRequest, val.handler);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_CloseTab_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_CloseTab_Params.prototype.initDefaults_ = function() {
    this.tabId = 0;
  };
  PageHandler_CloseTab_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_CloseTab_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_CloseTab_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_CloseTab_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_CloseTab_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tabId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_CloseTab_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_CloseTab_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.tabId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_GetProfileData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetProfileData_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_GetProfileData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetProfileData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetProfileData_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_GetProfileData_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetProfileData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_GetProfileData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetProfileData_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_GetProfileData_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetProfileData_ResponseParams.prototype.initDefaults_ = function() {
    this.profileData = null;
  };
  PageHandler_GetProfileData_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetProfileData_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetProfileData_ResponseParams.profileData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ProfileData, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetProfileData_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetProfileData_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetProfileData_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.profileData =
        decoder.decodeStructPointer(ProfileData);
    return val;
  };

  PageHandler_GetProfileData_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetProfileData_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ProfileData, val.profileData);
  };
  function PageHandler_SwitchToTab_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_SwitchToTab_Params.prototype.initDefaults_ = function() {
    this.switchToTabInfo = null;
  };
  PageHandler_SwitchToTab_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_SwitchToTab_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_SwitchToTab_Params.switchToTabInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SwitchToTabInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_SwitchToTab_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_SwitchToTab_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_SwitchToTab_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.switchToTabInfo =
        decoder.decodeStructPointer(SwitchToTabInfo);
    return val;
  };

  PageHandler_SwitchToTab_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_SwitchToTab_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SwitchToTabInfo, val.switchToTabInfo);
  };
  function PageHandler_OpenRecentlyClosedEntry_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OpenRecentlyClosedEntry_Params.prototype.initDefaults_ = function() {
    this.sessionId = 0;
  };
  PageHandler_OpenRecentlyClosedEntry_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OpenRecentlyClosedEntry_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_OpenRecentlyClosedEntry_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_OpenRecentlyClosedEntry_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OpenRecentlyClosedEntry_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sessionId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_OpenRecentlyClosedEntry_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OpenRecentlyClosedEntry_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.sessionId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_SaveRecentlyClosedExpandedPref_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_SaveRecentlyClosedExpandedPref_Params.prototype.initDefaults_ = function() {
    this.expanded = false;
  };
  PageHandler_SaveRecentlyClosedExpandedPref_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_SaveRecentlyClosedExpandedPref_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_SaveRecentlyClosedExpandedPref_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_SaveRecentlyClosedExpandedPref_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_SaveRecentlyClosedExpandedPref_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.expanded = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_SaveRecentlyClosedExpandedPref_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_SaveRecentlyClosedExpandedPref_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.expanded & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_ShowUI_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ShowUI_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_ShowUI_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ShowUI_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_ShowUI_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_ShowUI_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ShowUI_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_ShowUI_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ShowUI_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Page_TabsChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_TabsChanged_Params.prototype.initDefaults_ = function() {
    this.profileTabs = null;
  };
  Page_TabsChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_TabsChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Page_TabsChanged_Params.profileTabs
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ProfileData, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_TabsChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_TabsChanged_Params.decode = function(decoder) {
    var packed;
    var val = new Page_TabsChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.profileTabs =
        decoder.decodeStructPointer(ProfileData);
    return val;
  };

  Page_TabsChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_TabsChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ProfileData, val.profileTabs);
  };
  function Page_TabUpdated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_TabUpdated_Params.prototype.initDefaults_ = function() {
    this.tabUpdateInfo = null;
  };
  Page_TabUpdated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_TabUpdated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Page_TabUpdated_Params.tabUpdateInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TabUpdateInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_TabUpdated_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_TabUpdated_Params.decode = function(decoder) {
    var packed;
    var val = new Page_TabUpdated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tabUpdateInfo =
        decoder.decodeStructPointer(TabUpdateInfo);
    return val;
  };

  Page_TabUpdated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_TabUpdated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TabUpdateInfo, val.tabUpdateInfo);
  };
  function Page_TabsRemoved_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_TabsRemoved_Params.prototype.initDefaults_ = function() {
    this.tabIds = null;
  };
  Page_TabsRemoved_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_TabsRemoved_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Page_TabsRemoved_Params.tabIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 4, codec.Int32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_TabsRemoved_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_TabsRemoved_Params.decode = function(decoder) {
    var packed;
    var val = new Page_TabsRemoved_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tabIds =
        decoder.decodeArrayPointer(codec.Int32);
    return val;
  };

  Page_TabsRemoved_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_TabsRemoved_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Int32, val.tabIds);
  };
  var kPageHandlerFactory_CreatePageHandler_Name = 445910499;

  function PageHandlerFactoryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PageHandlerFactory,
                                                   handleOrPtrInfo);
  }

  function PageHandlerFactoryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PageHandlerFactory, associatedInterfacePtrInfo);
  }

  PageHandlerFactoryAssociatedPtr.prototype =
      Object.create(PageHandlerFactoryPtr.prototype);
  PageHandlerFactoryAssociatedPtr.prototype.constructor =
      PageHandlerFactoryAssociatedPtr;

  function PageHandlerFactoryProxy(receiver) {
    this.receiver_ = receiver;
  }
  PageHandlerFactoryPtr.prototype.createPageHandler = function() {
    return PageHandlerFactoryProxy.prototype.createPageHandler
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerFactoryProxy.prototype.createPageHandler = function(page, handler) {
    var params_ = new PageHandlerFactory_CreatePageHandler_Params();
    params_.page = page;
    params_.handler = handler;
    var builder = new codec.MessageV0Builder(
        kPageHandlerFactory_CreatePageHandler_Name,
        codec.align(PageHandlerFactory_CreatePageHandler_Params.encodedSize));
    builder.encodeStruct(PageHandlerFactory_CreatePageHandler_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageHandlerFactoryStub(delegate) {
    this.delegate_ = delegate;
  }
  PageHandlerFactoryStub.prototype.createPageHandler = function(page, handler) {
    return this.delegate_ && this.delegate_.createPageHandler && this.delegate_.createPageHandler(page, handler);
  }

  PageHandlerFactoryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandlerFactory_CreatePageHandler_Name:
      var params = reader.decodeStruct(PageHandlerFactory_CreatePageHandler_Params);
      this.createPageHandler(params.page, params.handler);
      return true;
    default:
      return false;
    }
  };

  PageHandlerFactoryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePageHandlerFactoryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPageHandlerFactory_CreatePageHandler_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandlerFactory_CreatePageHandler_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageHandlerFactoryResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PageHandlerFactory = {
    name: 'tab_search.mojom.PageHandlerFactory',
    kVersion: 0,
    ptrClass: PageHandlerFactoryPtr,
    proxyClass: PageHandlerFactoryProxy,
    stubClass: PageHandlerFactoryStub,
    validateRequest: validatePageHandlerFactoryRequest,
    validateResponse: null,
  };
  PageHandlerFactoryStub.prototype.validator = validatePageHandlerFactoryRequest;
  PageHandlerFactoryProxy.prototype.validator = null;
  var kPageHandler_CloseTab_Name = 1298547416;
  var kPageHandler_GetProfileData_Name = 1962586384;
  var kPageHandler_SwitchToTab_Name = 1718134429;
  var kPageHandler_OpenRecentlyClosedEntry_Name = 1770514989;
  var kPageHandler_SaveRecentlyClosedExpandedPref_Name = 1004344447;
  var kPageHandler_ShowUI_Name = 1016706116;

  function PageHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PageHandler,
                                                   handleOrPtrInfo);
  }

  function PageHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PageHandler, associatedInterfacePtrInfo);
  }

  PageHandlerAssociatedPtr.prototype =
      Object.create(PageHandlerPtr.prototype);
  PageHandlerAssociatedPtr.prototype.constructor =
      PageHandlerAssociatedPtr;

  function PageHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  PageHandlerPtr.prototype.closeTab = function() {
    return PageHandlerProxy.prototype.closeTab
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.closeTab = function(tabId) {
    var params_ = new PageHandler_CloseTab_Params();
    params_.tabId = tabId;
    var builder = new codec.MessageV0Builder(
        kPageHandler_CloseTab_Name,
        codec.align(PageHandler_CloseTab_Params.encodedSize));
    builder.encodeStruct(PageHandler_CloseTab_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.getProfileData = function() {
    return PageHandlerProxy.prototype.getProfileData
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getProfileData = function() {
    var params_ = new PageHandler_GetProfileData_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetProfileData_Name,
          codec.align(PageHandler_GetProfileData_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetProfileData_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetProfileData_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.switchToTab = function() {
    return PageHandlerProxy.prototype.switchToTab
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.switchToTab = function(switchToTabInfo) {
    var params_ = new PageHandler_SwitchToTab_Params();
    params_.switchToTabInfo = switchToTabInfo;
    var builder = new codec.MessageV0Builder(
        kPageHandler_SwitchToTab_Name,
        codec.align(PageHandler_SwitchToTab_Params.encodedSize));
    builder.encodeStruct(PageHandler_SwitchToTab_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.openRecentlyClosedEntry = function() {
    return PageHandlerProxy.prototype.openRecentlyClosedEntry
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.openRecentlyClosedEntry = function(sessionId) {
    var params_ = new PageHandler_OpenRecentlyClosedEntry_Params();
    params_.sessionId = sessionId;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OpenRecentlyClosedEntry_Name,
        codec.align(PageHandler_OpenRecentlyClosedEntry_Params.encodedSize));
    builder.encodeStruct(PageHandler_OpenRecentlyClosedEntry_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.saveRecentlyClosedExpandedPref = function() {
    return PageHandlerProxy.prototype.saveRecentlyClosedExpandedPref
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.saveRecentlyClosedExpandedPref = function(expanded) {
    var params_ = new PageHandler_SaveRecentlyClosedExpandedPref_Params();
    params_.expanded = expanded;
    var builder = new codec.MessageV0Builder(
        kPageHandler_SaveRecentlyClosedExpandedPref_Name,
        codec.align(PageHandler_SaveRecentlyClosedExpandedPref_Params.encodedSize));
    builder.encodeStruct(PageHandler_SaveRecentlyClosedExpandedPref_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.showUI = function() {
    return PageHandlerProxy.prototype.showUI
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.showUI = function() {
    var params_ = new PageHandler_ShowUI_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_ShowUI_Name,
        codec.align(PageHandler_ShowUI_Params.encodedSize));
    builder.encodeStruct(PageHandler_ShowUI_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  PageHandlerStub.prototype.closeTab = function(tabId) {
    return this.delegate_ && this.delegate_.closeTab && this.delegate_.closeTab(tabId);
  }
  PageHandlerStub.prototype.getProfileData = function() {
    return this.delegate_ && this.delegate_.getProfileData && this.delegate_.getProfileData();
  }
  PageHandlerStub.prototype.switchToTab = function(switchToTabInfo) {
    return this.delegate_ && this.delegate_.switchToTab && this.delegate_.switchToTab(switchToTabInfo);
  }
  PageHandlerStub.prototype.openRecentlyClosedEntry = function(sessionId) {
    return this.delegate_ && this.delegate_.openRecentlyClosedEntry && this.delegate_.openRecentlyClosedEntry(sessionId);
  }
  PageHandlerStub.prototype.saveRecentlyClosedExpandedPref = function(expanded) {
    return this.delegate_ && this.delegate_.saveRecentlyClosedExpandedPref && this.delegate_.saveRecentlyClosedExpandedPref(expanded);
  }
  PageHandlerStub.prototype.showUI = function() {
    return this.delegate_ && this.delegate_.showUI && this.delegate_.showUI();
  }

  PageHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandler_CloseTab_Name:
      var params = reader.decodeStruct(PageHandler_CloseTab_Params);
      this.closeTab(params.tabId);
      return true;
    case kPageHandler_SwitchToTab_Name:
      var params = reader.decodeStruct(PageHandler_SwitchToTab_Params);
      this.switchToTab(params.switchToTabInfo);
      return true;
    case kPageHandler_OpenRecentlyClosedEntry_Name:
      var params = reader.decodeStruct(PageHandler_OpenRecentlyClosedEntry_Params);
      this.openRecentlyClosedEntry(params.sessionId);
      return true;
    case kPageHandler_SaveRecentlyClosedExpandedPref_Name:
      var params = reader.decodeStruct(PageHandler_SaveRecentlyClosedExpandedPref_Params);
      this.saveRecentlyClosedExpandedPref(params.expanded);
      return true;
    case kPageHandler_ShowUI_Name:
      var params = reader.decodeStruct(PageHandler_ShowUI_Params);
      this.showUI();
      return true;
    default:
      return false;
    }
  };

  PageHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandler_GetProfileData_Name:
      var params = reader.decodeStruct(PageHandler_GetProfileData_Params);
      this.getProfileData().then(function(response) {
        var responseParams =
            new PageHandler_GetProfileData_ResponseParams();
        responseParams.profileData = response.profileData;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetProfileData_Name,
            codec.align(PageHandler_GetProfileData_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetProfileData_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePageHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPageHandler_CloseTab_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_CloseTab_Params;
      break;
      case kPageHandler_GetProfileData_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetProfileData_Params;
      break;
      case kPageHandler_SwitchToTab_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_SwitchToTab_Params;
      break;
      case kPageHandler_OpenRecentlyClosedEntry_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OpenRecentlyClosedEntry_Params;
      break;
      case kPageHandler_SaveRecentlyClosedExpandedPref_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_SaveRecentlyClosedExpandedPref_Params;
      break;
      case kPageHandler_ShowUI_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_ShowUI_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageHandlerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPageHandler_GetProfileData_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetProfileData_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PageHandler = {
    name: 'tab_search.mojom.PageHandler',
    kVersion: 0,
    ptrClass: PageHandlerPtr,
    proxyClass: PageHandlerProxy,
    stubClass: PageHandlerStub,
    validateRequest: validatePageHandlerRequest,
    validateResponse: validatePageHandlerResponse,
  };
  PageHandlerStub.prototype.validator = validatePageHandlerRequest;
  PageHandlerProxy.prototype.validator = validatePageHandlerResponse;
  var kPage_TabsChanged_Name = 1002832096;
  var kPage_TabUpdated_Name = 2119873422;
  var kPage_TabsRemoved_Name = 196448256;

  function PagePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Page,
                                                   handleOrPtrInfo);
  }

  function PageAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Page, associatedInterfacePtrInfo);
  }

  PageAssociatedPtr.prototype =
      Object.create(PagePtr.prototype);
  PageAssociatedPtr.prototype.constructor =
      PageAssociatedPtr;

  function PageProxy(receiver) {
    this.receiver_ = receiver;
  }
  PagePtr.prototype.tabsChanged = function() {
    return PageProxy.prototype.tabsChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.tabsChanged = function(profileTabs) {
    var params_ = new Page_TabsChanged_Params();
    params_.profileTabs = profileTabs;
    var builder = new codec.MessageV0Builder(
        kPage_TabsChanged_Name,
        codec.align(Page_TabsChanged_Params.encodedSize));
    builder.encodeStruct(Page_TabsChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.tabUpdated = function() {
    return PageProxy.prototype.tabUpdated
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.tabUpdated = function(tabUpdateInfo) {
    var params_ = new Page_TabUpdated_Params();
    params_.tabUpdateInfo = tabUpdateInfo;
    var builder = new codec.MessageV0Builder(
        kPage_TabUpdated_Name,
        codec.align(Page_TabUpdated_Params.encodedSize));
    builder.encodeStruct(Page_TabUpdated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.tabsRemoved = function() {
    return PageProxy.prototype.tabsRemoved
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.tabsRemoved = function(tabIds) {
    var params_ = new Page_TabsRemoved_Params();
    params_.tabIds = tabIds;
    var builder = new codec.MessageV0Builder(
        kPage_TabsRemoved_Name,
        codec.align(Page_TabsRemoved_Params.encodedSize));
    builder.encodeStruct(Page_TabsRemoved_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageStub(delegate) {
    this.delegate_ = delegate;
  }
  PageStub.prototype.tabsChanged = function(profileTabs) {
    return this.delegate_ && this.delegate_.tabsChanged && this.delegate_.tabsChanged(profileTabs);
  }
  PageStub.prototype.tabUpdated = function(tabUpdateInfo) {
    return this.delegate_ && this.delegate_.tabUpdated && this.delegate_.tabUpdated(tabUpdateInfo);
  }
  PageStub.prototype.tabsRemoved = function(tabIds) {
    return this.delegate_ && this.delegate_.tabsRemoved && this.delegate_.tabsRemoved(tabIds);
  }

  PageStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPage_TabsChanged_Name:
      var params = reader.decodeStruct(Page_TabsChanged_Params);
      this.tabsChanged(params.profileTabs);
      return true;
    case kPage_TabUpdated_Name:
      var params = reader.decodeStruct(Page_TabUpdated_Params);
      this.tabUpdated(params.tabUpdateInfo);
      return true;
    case kPage_TabsRemoved_Name:
      var params = reader.decodeStruct(Page_TabsRemoved_Params);
      this.tabsRemoved(params.tabIds);
      return true;
    default:
      return false;
    }
  };

  PageStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePageRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPage_TabsChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_TabsChanged_Params;
      break;
      case kPage_TabUpdated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_TabUpdated_Params;
      break;
      case kPage_TabsRemoved_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_TabsRemoved_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Page = {
    name: 'tab_search.mojom.Page',
    kVersion: 0,
    ptrClass: PagePtr,
    proxyClass: PageProxy,
    stubClass: PageStub,
    validateRequest: validatePageRequest,
    validateResponse: null,
  };
  PageStub.prototype.validator = validatePageRequest;
  PageProxy.prototype.validator = null;
  exports.ProfileData = ProfileData;
  exports.Window = Window;
  exports.Tab = Tab;
  exports.RecentlyClosedTab = RecentlyClosedTab;
  exports.TabGroup = TabGroup;
  exports.RecentlyClosedTabGroup = RecentlyClosedTabGroup;
  exports.SwitchToTabInfo = SwitchToTabInfo;
  exports.TabUpdateInfo = TabUpdateInfo;
  exports.PageHandlerFactory = PageHandlerFactory;
  exports.PageHandlerFactoryPtr = PageHandlerFactoryPtr;
  exports.PageHandlerFactoryAssociatedPtr = PageHandlerFactoryAssociatedPtr;
  exports.PageHandler = PageHandler;
  exports.PageHandlerPtr = PageHandlerPtr;
  exports.PageHandlerAssociatedPtr = PageHandlerAssociatedPtr;
  exports.Page = Page;
  exports.PagePtr = PagePtr;
  exports.PageAssociatedPtr = PageAssociatedPtr;
})();