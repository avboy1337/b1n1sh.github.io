// chrome/browser/ui/webui/read_later/side_panel/bookmarks.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/ui/webui/read_later/side_panel/bookmarks.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('sidePanel.mojom');
  var window_open_disposition$ =
      mojo.internal.exposeNamespace('ui.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/base/mojom/window_open_disposition.mojom', '../../../../../../ui/base/mojom/window_open_disposition.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../../url/mojom/url.mojom.js');
  }



  function BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params.prototype.initDefaults_ = function() {
    this.handler = new bindings.InterfaceRequest();
  };
  BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params.handler
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params.encodedSize = codec.kStructHeaderSize + 8;

  BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params.decode = function(decoder) {
    var packed;
    var val = new BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.handler =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.handler);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function BookmarksPageHandler_OpenBookmark_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BookmarksPageHandler_OpenBookmark_Params.prototype.initDefaults_ = function() {
    this.url = null;
    this.parentFolderDepth = 0;
    this.clickModifiers = null;
  };
  BookmarksPageHandler_OpenBookmark_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BookmarksPageHandler_OpenBookmark_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BookmarksPageHandler_OpenBookmark_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate BookmarksPageHandler_OpenBookmark_Params.clickModifiers
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, window_open_disposition$.ClickModifiers, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BookmarksPageHandler_OpenBookmark_Params.encodedSize = codec.kStructHeaderSize + 24;

  BookmarksPageHandler_OpenBookmark_Params.decode = function(decoder) {
    var packed;
    var val = new BookmarksPageHandler_OpenBookmark_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.parentFolderDepth =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.clickModifiers =
        decoder.decodeStructPointer(window_open_disposition$.ClickModifiers);
    return val;
  };

  BookmarksPageHandler_OpenBookmark_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BookmarksPageHandler_OpenBookmark_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.Int32, val.parentFolderDepth);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(window_open_disposition$.ClickModifiers, val.clickModifiers);
  };
  function BookmarksPageHandler_ShowContextMenu_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BookmarksPageHandler_ShowContextMenu_Params.prototype.initDefaults_ = function() {
    this.id = null;
    this.point = null;
  };
  BookmarksPageHandler_ShowContextMenu_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BookmarksPageHandler_ShowContextMenu_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BookmarksPageHandler_ShowContextMenu_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate BookmarksPageHandler_ShowContextMenu_Params.point
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Point, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BookmarksPageHandler_ShowContextMenu_Params.encodedSize = codec.kStructHeaderSize + 16;

  BookmarksPageHandler_ShowContextMenu_Params.decode = function(decoder) {
    var packed;
    var val = new BookmarksPageHandler_ShowContextMenu_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    val.point =
        decoder.decodeStructPointer(geometry$.Point);
    return val;
  };

  BookmarksPageHandler_ShowContextMenu_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BookmarksPageHandler_ShowContextMenu_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
    encoder.encodeStructPointer(geometry$.Point, val.point);
  };
  var kBookmarksPageHandlerFactory_CreateBookmarksPageHandler_Name = 1708801310;

  function BookmarksPageHandlerFactoryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(BookmarksPageHandlerFactory,
                                                   handleOrPtrInfo);
  }

  function BookmarksPageHandlerFactoryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        BookmarksPageHandlerFactory, associatedInterfacePtrInfo);
  }

  BookmarksPageHandlerFactoryAssociatedPtr.prototype =
      Object.create(BookmarksPageHandlerFactoryPtr.prototype);
  BookmarksPageHandlerFactoryAssociatedPtr.prototype.constructor =
      BookmarksPageHandlerFactoryAssociatedPtr;

  function BookmarksPageHandlerFactoryProxy(receiver) {
    this.receiver_ = receiver;
  }
  BookmarksPageHandlerFactoryPtr.prototype.createBookmarksPageHandler = function() {
    return BookmarksPageHandlerFactoryProxy.prototype.createBookmarksPageHandler
        .apply(this.ptr.getProxy(), arguments);
  };

  BookmarksPageHandlerFactoryProxy.prototype.createBookmarksPageHandler = function(handler) {
    var params_ = new BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params();
    params_.handler = handler;
    var builder = new codec.MessageV0Builder(
        kBookmarksPageHandlerFactory_CreateBookmarksPageHandler_Name,
        codec.align(BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params.encodedSize));
    builder.encodeStruct(BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function BookmarksPageHandlerFactoryStub(delegate) {
    this.delegate_ = delegate;
  }
  BookmarksPageHandlerFactoryStub.prototype.createBookmarksPageHandler = function(handler) {
    return this.delegate_ && this.delegate_.createBookmarksPageHandler && this.delegate_.createBookmarksPageHandler(handler);
  }

  BookmarksPageHandlerFactoryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kBookmarksPageHandlerFactory_CreateBookmarksPageHandler_Name:
      var params = reader.decodeStruct(BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params);
      this.createBookmarksPageHandler(params.handler);
      return true;
    default:
      return false;
    }
  };

  BookmarksPageHandlerFactoryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateBookmarksPageHandlerFactoryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kBookmarksPageHandlerFactory_CreateBookmarksPageHandler_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = BookmarksPageHandlerFactory_CreateBookmarksPageHandler_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateBookmarksPageHandlerFactoryResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var BookmarksPageHandlerFactory = {
    name: 'side_panel.mojom.BookmarksPageHandlerFactory',
    kVersion: 0,
    ptrClass: BookmarksPageHandlerFactoryPtr,
    proxyClass: BookmarksPageHandlerFactoryProxy,
    stubClass: BookmarksPageHandlerFactoryStub,
    validateRequest: validateBookmarksPageHandlerFactoryRequest,
    validateResponse: null,
  };
  BookmarksPageHandlerFactoryStub.prototype.validator = validateBookmarksPageHandlerFactoryRequest;
  BookmarksPageHandlerFactoryProxy.prototype.validator = null;
  var kBookmarksPageHandler_OpenBookmark_Name = 1925401975;
  var kBookmarksPageHandler_ShowContextMenu_Name = 279889551;

  function BookmarksPageHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(BookmarksPageHandler,
                                                   handleOrPtrInfo);
  }

  function BookmarksPageHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        BookmarksPageHandler, associatedInterfacePtrInfo);
  }

  BookmarksPageHandlerAssociatedPtr.prototype =
      Object.create(BookmarksPageHandlerPtr.prototype);
  BookmarksPageHandlerAssociatedPtr.prototype.constructor =
      BookmarksPageHandlerAssociatedPtr;

  function BookmarksPageHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  BookmarksPageHandlerPtr.prototype.openBookmark = function() {
    return BookmarksPageHandlerProxy.prototype.openBookmark
        .apply(this.ptr.getProxy(), arguments);
  };

  BookmarksPageHandlerProxy.prototype.openBookmark = function(url, parentFolderDepth, clickModifiers) {
    var params_ = new BookmarksPageHandler_OpenBookmark_Params();
    params_.url = url;
    params_.parentFolderDepth = parentFolderDepth;
    params_.clickModifiers = clickModifiers;
    var builder = new codec.MessageV0Builder(
        kBookmarksPageHandler_OpenBookmark_Name,
        codec.align(BookmarksPageHandler_OpenBookmark_Params.encodedSize));
    builder.encodeStruct(BookmarksPageHandler_OpenBookmark_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  BookmarksPageHandlerPtr.prototype.showContextMenu = function() {
    return BookmarksPageHandlerProxy.prototype.showContextMenu
        .apply(this.ptr.getProxy(), arguments);
  };

  BookmarksPageHandlerProxy.prototype.showContextMenu = function(id, point) {
    var params_ = new BookmarksPageHandler_ShowContextMenu_Params();
    params_.id = id;
    params_.point = point;
    var builder = new codec.MessageV0Builder(
        kBookmarksPageHandler_ShowContextMenu_Name,
        codec.align(BookmarksPageHandler_ShowContextMenu_Params.encodedSize));
    builder.encodeStruct(BookmarksPageHandler_ShowContextMenu_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function BookmarksPageHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  BookmarksPageHandlerStub.prototype.openBookmark = function(url, parentFolderDepth, clickModifiers) {
    return this.delegate_ && this.delegate_.openBookmark && this.delegate_.openBookmark(url, parentFolderDepth, clickModifiers);
  }
  BookmarksPageHandlerStub.prototype.showContextMenu = function(id, point) {
    return this.delegate_ && this.delegate_.showContextMenu && this.delegate_.showContextMenu(id, point);
  }

  BookmarksPageHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kBookmarksPageHandler_OpenBookmark_Name:
      var params = reader.decodeStruct(BookmarksPageHandler_OpenBookmark_Params);
      this.openBookmark(params.url, params.parentFolderDepth, params.clickModifiers);
      return true;
    case kBookmarksPageHandler_ShowContextMenu_Name:
      var params = reader.decodeStruct(BookmarksPageHandler_ShowContextMenu_Params);
      this.showContextMenu(params.id, params.point);
      return true;
    default:
      return false;
    }
  };

  BookmarksPageHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateBookmarksPageHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kBookmarksPageHandler_OpenBookmark_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = BookmarksPageHandler_OpenBookmark_Params;
      break;
      case kBookmarksPageHandler_ShowContextMenu_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = BookmarksPageHandler_ShowContextMenu_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateBookmarksPageHandlerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var BookmarksPageHandler = {
    name: 'side_panel.mojom.BookmarksPageHandler',
    kVersion: 0,
    ptrClass: BookmarksPageHandlerPtr,
    proxyClass: BookmarksPageHandlerProxy,
    stubClass: BookmarksPageHandlerStub,
    validateRequest: validateBookmarksPageHandlerRequest,
    validateResponse: null,
  };
  BookmarksPageHandlerStub.prototype.validator = validateBookmarksPageHandlerRequest;
  BookmarksPageHandlerProxy.prototype.validator = null;
  exports.BookmarksPageHandlerFactory = BookmarksPageHandlerFactory;
  exports.BookmarksPageHandlerFactoryPtr = BookmarksPageHandlerFactoryPtr;
  exports.BookmarksPageHandlerFactoryAssociatedPtr = BookmarksPageHandlerFactoryAssociatedPtr;
  exports.BookmarksPageHandler = BookmarksPageHandler;
  exports.BookmarksPageHandlerPtr = BookmarksPageHandlerPtr;
  exports.BookmarksPageHandlerAssociatedPtr = BookmarksPageHandlerAssociatedPtr;
})();