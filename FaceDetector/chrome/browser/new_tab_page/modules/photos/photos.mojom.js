// chrome/browser/new_tab_page/modules/photos/photos.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/new_tab_page/modules/photos/photos.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('photos.mojom');
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function Memory(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Memory.prototype.initDefaults_ = function() {
    this.id = null;
    this.title = null;
    this.itemUrl = null;
    this.coverUrl = null;
    this.viewed = false;
  };
  Memory.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Memory.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Memory.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Memory.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Memory.itemUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Memory.coverUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Memory.encodedSize = codec.kStructHeaderSize + 40;

  Memory.decode = function(decoder) {
    var packed;
    var val = new Memory();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    val.title =
        decoder.decodeStruct(codec.String);
    val.itemUrl =
        decoder.decodeStructPointer(url$.Url);
    val.coverUrl =
        decoder.decodeStructPointer(url$.Url);
    packed = decoder.readUint8();
    val.viewed = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Memory.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Memory.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
    encoder.encodeStruct(codec.String, val.title);
    encoder.encodeStructPointer(url$.Url, val.itemUrl);
    encoder.encodeStructPointer(url$.Url, val.coverUrl);
    packed = 0;
    packed |= (val.viewed & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PhotosHandler_GetMemories_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PhotosHandler_GetMemories_Params.prototype.initDefaults_ = function() {
  };
  PhotosHandler_GetMemories_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PhotosHandler_GetMemories_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PhotosHandler_GetMemories_Params.encodedSize = codec.kStructHeaderSize + 0;

  PhotosHandler_GetMemories_Params.decode = function(decoder) {
    var packed;
    var val = new PhotosHandler_GetMemories_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PhotosHandler_GetMemories_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PhotosHandler_GetMemories_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PhotosHandler_GetMemories_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PhotosHandler_GetMemories_ResponseParams.prototype.initDefaults_ = function() {
    this.memories = null;
  };
  PhotosHandler_GetMemories_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PhotosHandler_GetMemories_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhotosHandler_GetMemories_ResponseParams.memories
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(Memory), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PhotosHandler_GetMemories_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PhotosHandler_GetMemories_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PhotosHandler_GetMemories_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.memories =
        decoder.decodeArrayPointer(new codec.PointerTo(Memory));
    return val;
  };

  PhotosHandler_GetMemories_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PhotosHandler_GetMemories_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(Memory), val.memories);
  };
  var kPhotosHandler_GetMemories_Name = 602158253;

  function PhotosHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PhotosHandler,
                                                   handleOrPtrInfo);
  }

  function PhotosHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PhotosHandler, associatedInterfacePtrInfo);
  }

  PhotosHandlerAssociatedPtr.prototype =
      Object.create(PhotosHandlerPtr.prototype);
  PhotosHandlerAssociatedPtr.prototype.constructor =
      PhotosHandlerAssociatedPtr;

  function PhotosHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  PhotosHandlerPtr.prototype.getMemories = function() {
    return PhotosHandlerProxy.prototype.getMemories
        .apply(this.ptr.getProxy(), arguments);
  };

  PhotosHandlerProxy.prototype.getMemories = function() {
    var params_ = new PhotosHandler_GetMemories_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPhotosHandler_GetMemories_Name,
          codec.align(PhotosHandler_GetMemories_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PhotosHandler_GetMemories_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PhotosHandler_GetMemories_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PhotosHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  PhotosHandlerStub.prototype.getMemories = function() {
    return this.delegate_ && this.delegate_.getMemories && this.delegate_.getMemories();
  }

  PhotosHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  PhotosHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPhotosHandler_GetMemories_Name:
      var params = reader.decodeStruct(PhotosHandler_GetMemories_Params);
      this.getMemories().then(function(response) {
        var responseParams =
            new PhotosHandler_GetMemories_ResponseParams();
        responseParams.memories = response.memories;
        var builder = new codec.MessageV1Builder(
            kPhotosHandler_GetMemories_Name,
            codec.align(PhotosHandler_GetMemories_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PhotosHandler_GetMemories_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePhotosHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPhotosHandler_GetMemories_Name:
        if (message.expectsResponse())
          paramsClass = PhotosHandler_GetMemories_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePhotosHandlerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPhotosHandler_GetMemories_Name:
        if (message.isResponse())
          paramsClass = PhotosHandler_GetMemories_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PhotosHandler = {
    name: 'photos.mojom.PhotosHandler',
    kVersion: 0,
    ptrClass: PhotosHandlerPtr,
    proxyClass: PhotosHandlerProxy,
    stubClass: PhotosHandlerStub,
    validateRequest: validatePhotosHandlerRequest,
    validateResponse: validatePhotosHandlerResponse,
  };
  PhotosHandlerStub.prototype.validator = validatePhotosHandlerRequest;
  PhotosHandlerProxy.prototype.validator = validatePhotosHandlerResponse;
  exports.Memory = Memory;
  exports.PhotosHandler = PhotosHandler;
  exports.PhotosHandlerPtr = PhotosHandlerPtr;
  exports.PhotosHandlerAssociatedPtr = PhotosHandlerAssociatedPtr;
})();