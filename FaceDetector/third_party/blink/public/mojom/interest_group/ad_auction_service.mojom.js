// third_party/blink/public/mojom/interest_group/ad_auction_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/interest_group/ad_auction_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var interest_group_types$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/interest_group/interest_group_types.mojom', 'interest_group_types.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function AdAuctionService_RunAdAuction_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AdAuctionService_RunAdAuction_Params.prototype.initDefaults_ = function() {
    this.config = null;
  };
  AdAuctionService_RunAdAuction_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AdAuctionService_RunAdAuction_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AdAuctionService_RunAdAuction_Params.config
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, interest_group_types$.AuctionAdConfig, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AdAuctionService_RunAdAuction_Params.encodedSize = codec.kStructHeaderSize + 8;

  AdAuctionService_RunAdAuction_Params.decode = function(decoder) {
    var packed;
    var val = new AdAuctionService_RunAdAuction_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.config =
        decoder.decodeStructPointer(interest_group_types$.AuctionAdConfig);
    return val;
  };

  AdAuctionService_RunAdAuction_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AdAuctionService_RunAdAuction_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(interest_group_types$.AuctionAdConfig, val.config);
  };
  function AdAuctionService_RunAdAuction_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AdAuctionService_RunAdAuction_ResponseParams.prototype.initDefaults_ = function() {
    this.adDisplayUrl = null;
  };
  AdAuctionService_RunAdAuction_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AdAuctionService_RunAdAuction_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AdAuctionService_RunAdAuction_ResponseParams.adDisplayUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AdAuctionService_RunAdAuction_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  AdAuctionService_RunAdAuction_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new AdAuctionService_RunAdAuction_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.adDisplayUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  AdAuctionService_RunAdAuction_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AdAuctionService_RunAdAuction_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.adDisplayUrl);
  };
  var kAdAuctionService_RunAdAuction_Name = 0;

  function AdAuctionServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AdAuctionService,
                                                   handleOrPtrInfo);
  }

  function AdAuctionServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AdAuctionService, associatedInterfacePtrInfo);
  }

  AdAuctionServiceAssociatedPtr.prototype =
      Object.create(AdAuctionServicePtr.prototype);
  AdAuctionServiceAssociatedPtr.prototype.constructor =
      AdAuctionServiceAssociatedPtr;

  function AdAuctionServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  AdAuctionServicePtr.prototype.runAdAuction = function() {
    return AdAuctionServiceProxy.prototype.runAdAuction
        .apply(this.ptr.getProxy(), arguments);
  };

  AdAuctionServiceProxy.prototype.runAdAuction = function(config) {
    var params_ = new AdAuctionService_RunAdAuction_Params();
    params_.config = config;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kAdAuctionService_RunAdAuction_Name,
          codec.align(AdAuctionService_RunAdAuction_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(AdAuctionService_RunAdAuction_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(AdAuctionService_RunAdAuction_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function AdAuctionServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  AdAuctionServiceStub.prototype.runAdAuction = function(config) {
    return this.delegate_ && this.delegate_.runAdAuction && this.delegate_.runAdAuction(config);
  }

  AdAuctionServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  AdAuctionServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAdAuctionService_RunAdAuction_Name:
      var params = reader.decodeStruct(AdAuctionService_RunAdAuction_Params);
      this.runAdAuction(params.config).then(function(response) {
        var responseParams =
            new AdAuctionService_RunAdAuction_ResponseParams();
        responseParams.adDisplayUrl = response.adDisplayUrl;
        var builder = new codec.MessageV1Builder(
            kAdAuctionService_RunAdAuction_Name,
            codec.align(AdAuctionService_RunAdAuction_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(AdAuctionService_RunAdAuction_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateAdAuctionServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAdAuctionService_RunAdAuction_Name:
        if (message.expectsResponse())
          paramsClass = AdAuctionService_RunAdAuction_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAdAuctionServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kAdAuctionService_RunAdAuction_Name:
        if (message.isResponse())
          paramsClass = AdAuctionService_RunAdAuction_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var AdAuctionService = {
    name: 'blink.mojom.AdAuctionService',
    kVersion: 0,
    ptrClass: AdAuctionServicePtr,
    proxyClass: AdAuctionServiceProxy,
    stubClass: AdAuctionServiceStub,
    validateRequest: validateAdAuctionServiceRequest,
    validateResponse: validateAdAuctionServiceResponse,
  };
  AdAuctionServiceStub.prototype.validator = validateAdAuctionServiceRequest;
  AdAuctionServiceProxy.prototype.validator = validateAdAuctionServiceResponse;
  exports.AdAuctionService = AdAuctionService;
  exports.AdAuctionServicePtr = AdAuctionServicePtr;
  exports.AdAuctionServiceAssociatedPtr = AdAuctionServiceAssociatedPtr;
})();