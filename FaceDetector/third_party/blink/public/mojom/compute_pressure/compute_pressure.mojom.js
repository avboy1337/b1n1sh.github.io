// third_party/blink/public/mojom/compute_pressure/compute_pressure.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/compute_pressure/compute_pressure.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');


  var MAX_COMPUTE_PRESSURE_CPU_UTILIZATION_THRESHOLDS = 3;
  var MAX_COMPUTE_PRESSURE_CPU_SPEED_THRESHOLDS = 1;
  var ComputePressureStatus = {};
  ComputePressureStatus.kOk = 0;
  ComputePressureStatus.kNotSupported = 1;
  ComputePressureStatus.kSecurityError = 2;
  ComputePressureStatus.MIN_VALUE = 0;
  ComputePressureStatus.MAX_VALUE = 2;

  ComputePressureStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  ComputePressureStatus.toKnownEnumValue = function(value) {
    return value;
  };

  ComputePressureStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function ComputePressureState(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ComputePressureState.prototype.initDefaults_ = function() {
    this.cpuUtilization = 0;
    this.cpuSpeed = 0;
  };
  ComputePressureState.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ComputePressureState.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ComputePressureState.encodedSize = codec.kStructHeaderSize + 16;

  ComputePressureState.decode = function(decoder) {
    var packed;
    var val = new ComputePressureState();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cpuUtilization =
        decoder.decodeStruct(codec.Double);
    val.cpuSpeed =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  ComputePressureState.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ComputePressureState.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Double, val.cpuUtilization);
    encoder.encodeStruct(codec.Double, val.cpuSpeed);
  };
  function ComputePressureQuantization(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ComputePressureQuantization.prototype.initDefaults_ = function() {
    this.cpuUtilizationThresholds = null;
    this.cpuSpeedThresholds = null;
  };
  ComputePressureQuantization.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ComputePressureQuantization.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ComputePressureQuantization.cpuUtilizationThresholds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.Double, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ComputePressureQuantization.cpuSpeedThresholds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, codec.Double, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ComputePressureQuantization.encodedSize = codec.kStructHeaderSize + 16;

  ComputePressureQuantization.decode = function(decoder) {
    var packed;
    var val = new ComputePressureQuantization();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cpuUtilizationThresholds =
        decoder.decodeArrayPointer(codec.Double);
    val.cpuSpeedThresholds =
        decoder.decodeArrayPointer(codec.Double);
    return val;
  };

  ComputePressureQuantization.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ComputePressureQuantization.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Double, val.cpuUtilizationThresholds);
    encoder.encodeArrayPointer(codec.Double, val.cpuSpeedThresholds);
  };
  function ComputePressureObserver_OnUpdate_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ComputePressureObserver_OnUpdate_Params.prototype.initDefaults_ = function() {
    this.state = null;
  };
  ComputePressureObserver_OnUpdate_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ComputePressureObserver_OnUpdate_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ComputePressureObserver_OnUpdate_Params.state
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ComputePressureState, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ComputePressureObserver_OnUpdate_Params.encodedSize = codec.kStructHeaderSize + 8;

  ComputePressureObserver_OnUpdate_Params.decode = function(decoder) {
    var packed;
    var val = new ComputePressureObserver_OnUpdate_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.state =
        decoder.decodeStructPointer(ComputePressureState);
    return val;
  };

  ComputePressureObserver_OnUpdate_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ComputePressureObserver_OnUpdate_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ComputePressureState, val.state);
  };
  function ComputePressureHost_AddObserver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ComputePressureHost_AddObserver_Params.prototype.initDefaults_ = function() {
    this.observer = new ComputePressureObserverPtr();
    this.quantization = null;
  };
  ComputePressureHost_AddObserver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ComputePressureHost_AddObserver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ComputePressureHost_AddObserver_Params.observer
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ComputePressureHost_AddObserver_Params.quantization
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, ComputePressureQuantization, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ComputePressureHost_AddObserver_Params.encodedSize = codec.kStructHeaderSize + 16;

  ComputePressureHost_AddObserver_Params.decode = function(decoder) {
    var packed;
    var val = new ComputePressureHost_AddObserver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.observer =
        decoder.decodeStruct(new codec.Interface(ComputePressureObserverPtr));
    val.quantization =
        decoder.decodeStructPointer(ComputePressureQuantization);
    return val;
  };

  ComputePressureHost_AddObserver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ComputePressureHost_AddObserver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(ComputePressureObserverPtr), val.observer);
    encoder.encodeStructPointer(ComputePressureQuantization, val.quantization);
  };
  function ComputePressureHost_AddObserver_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ComputePressureHost_AddObserver_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ComputePressureHost_AddObserver_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ComputePressureHost_AddObserver_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ComputePressureHost_AddObserver_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ComputePressureStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ComputePressureHost_AddObserver_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ComputePressureHost_AddObserver_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ComputePressureHost_AddObserver_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(ComputePressureStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ComputePressureHost_AddObserver_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ComputePressureHost_AddObserver_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kComputePressureObserver_OnUpdate_Name = 0;

  function ComputePressureObserverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ComputePressureObserver,
                                                   handleOrPtrInfo);
  }

  function ComputePressureObserverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ComputePressureObserver, associatedInterfacePtrInfo);
  }

  ComputePressureObserverAssociatedPtr.prototype =
      Object.create(ComputePressureObserverPtr.prototype);
  ComputePressureObserverAssociatedPtr.prototype.constructor =
      ComputePressureObserverAssociatedPtr;

  function ComputePressureObserverProxy(receiver) {
    this.receiver_ = receiver;
  }
  ComputePressureObserverPtr.prototype.onUpdate = function() {
    return ComputePressureObserverProxy.prototype.onUpdate
        .apply(this.ptr.getProxy(), arguments);
  };

  ComputePressureObserverProxy.prototype.onUpdate = function(state) {
    var params_ = new ComputePressureObserver_OnUpdate_Params();
    params_.state = state;
    var builder = new codec.MessageV0Builder(
        kComputePressureObserver_OnUpdate_Name,
        codec.align(ComputePressureObserver_OnUpdate_Params.encodedSize));
    builder.encodeStruct(ComputePressureObserver_OnUpdate_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ComputePressureObserverStub(delegate) {
    this.delegate_ = delegate;
  }
  ComputePressureObserverStub.prototype.onUpdate = function(state) {
    return this.delegate_ && this.delegate_.onUpdate && this.delegate_.onUpdate(state);
  }

  ComputePressureObserverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kComputePressureObserver_OnUpdate_Name:
      var params = reader.decodeStruct(ComputePressureObserver_OnUpdate_Params);
      this.onUpdate(params.state);
      return true;
    default:
      return false;
    }
  };

  ComputePressureObserverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateComputePressureObserverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kComputePressureObserver_OnUpdate_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ComputePressureObserver_OnUpdate_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateComputePressureObserverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ComputePressureObserver = {
    name: 'blink.mojom.ComputePressureObserver',
    kVersion: 0,
    ptrClass: ComputePressureObserverPtr,
    proxyClass: ComputePressureObserverProxy,
    stubClass: ComputePressureObserverStub,
    validateRequest: validateComputePressureObserverRequest,
    validateResponse: null,
  };
  ComputePressureObserverStub.prototype.validator = validateComputePressureObserverRequest;
  ComputePressureObserverProxy.prototype.validator = null;
  var kComputePressureHost_AddObserver_Name = 0;

  function ComputePressureHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ComputePressureHost,
                                                   handleOrPtrInfo);
  }

  function ComputePressureHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ComputePressureHost, associatedInterfacePtrInfo);
  }

  ComputePressureHostAssociatedPtr.prototype =
      Object.create(ComputePressureHostPtr.prototype);
  ComputePressureHostAssociatedPtr.prototype.constructor =
      ComputePressureHostAssociatedPtr;

  function ComputePressureHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  ComputePressureHostPtr.prototype.addObserver = function() {
    return ComputePressureHostProxy.prototype.addObserver
        .apply(this.ptr.getProxy(), arguments);
  };

  ComputePressureHostProxy.prototype.addObserver = function(observer, quantization) {
    var params_ = new ComputePressureHost_AddObserver_Params();
    params_.observer = observer;
    params_.quantization = quantization;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kComputePressureHost_AddObserver_Name,
          codec.align(ComputePressureHost_AddObserver_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ComputePressureHost_AddObserver_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ComputePressureHost_AddObserver_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ComputePressureHostStub(delegate) {
    this.delegate_ = delegate;
  }
  ComputePressureHostStub.prototype.addObserver = function(observer, quantization) {
    return this.delegate_ && this.delegate_.addObserver && this.delegate_.addObserver(observer, quantization);
  }

  ComputePressureHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ComputePressureHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kComputePressureHost_AddObserver_Name:
      var params = reader.decodeStruct(ComputePressureHost_AddObserver_Params);
      this.addObserver(params.observer, params.quantization).then(function(response) {
        var responseParams =
            new ComputePressureHost_AddObserver_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kComputePressureHost_AddObserver_Name,
            codec.align(ComputePressureHost_AddObserver_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ComputePressureHost_AddObserver_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateComputePressureHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kComputePressureHost_AddObserver_Name:
        if (message.expectsResponse())
          paramsClass = ComputePressureHost_AddObserver_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateComputePressureHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kComputePressureHost_AddObserver_Name:
        if (message.isResponse())
          paramsClass = ComputePressureHost_AddObserver_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ComputePressureHost = {
    name: 'blink.mojom.ComputePressureHost',
    kVersion: 0,
    ptrClass: ComputePressureHostPtr,
    proxyClass: ComputePressureHostProxy,
    stubClass: ComputePressureHostStub,
    validateRequest: validateComputePressureHostRequest,
    validateResponse: validateComputePressureHostResponse,
  };
  ComputePressureHostStub.prototype.validator = validateComputePressureHostRequest;
  ComputePressureHostProxy.prototype.validator = validateComputePressureHostResponse;
  exports.MAX_COMPUTE_PRESSURE_CPU_UTILIZATION_THRESHOLDS = MAX_COMPUTE_PRESSURE_CPU_UTILIZATION_THRESHOLDS;
  exports.MAX_COMPUTE_PRESSURE_CPU_SPEED_THRESHOLDS = MAX_COMPUTE_PRESSURE_CPU_SPEED_THRESHOLDS;
  exports.ComputePressureStatus = ComputePressureStatus;
  exports.ComputePressureState = ComputePressureState;
  exports.ComputePressureQuantization = ComputePressureQuantization;
  exports.ComputePressureObserver = ComputePressureObserver;
  exports.ComputePressureObserverPtr = ComputePressureObserverPtr;
  exports.ComputePressureObserverAssociatedPtr = ComputePressureObserverAssociatedPtr;
  exports.ComputePressureHost = ComputePressureHost;
  exports.ComputePressureHostPtr = ComputePressureHostPtr;
  exports.ComputePressureHostAssociatedPtr = ComputePressureHostAssociatedPtr;
})();