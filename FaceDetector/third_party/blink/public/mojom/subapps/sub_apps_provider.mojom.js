// third_party/blink/public/mojom/subapps/sub_apps_provider.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/subapps/sub_apps_provider.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');


  var SubAppsProviderResult = {};
  SubAppsProviderResult.kSuccess = 0;
  SubAppsProviderResult.kFailure = 1;
  SubAppsProviderResult.MIN_VALUE = 0;
  SubAppsProviderResult.MAX_VALUE = 1;

  SubAppsProviderResult.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  SubAppsProviderResult.toKnownEnumValue = function(value) {
    return value;
  };

  SubAppsProviderResult.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function SubAppsProvider_Add_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SubAppsProvider_Add_Params.prototype.initDefaults_ = function() {
  };
  SubAppsProvider_Add_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SubAppsProvider_Add_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SubAppsProvider_Add_Params.encodedSize = codec.kStructHeaderSize + 0;

  SubAppsProvider_Add_Params.decode = function(decoder) {
    var packed;
    var val = new SubAppsProvider_Add_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SubAppsProvider_Add_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SubAppsProvider_Add_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SubAppsProvider_Add_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SubAppsProvider_Add_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
  };
  SubAppsProvider_Add_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SubAppsProvider_Add_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SubAppsProvider_Add_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, SubAppsProviderResult);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SubAppsProvider_Add_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SubAppsProvider_Add_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SubAppsProvider_Add_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(SubAppsProviderResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SubAppsProvider_Add_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SubAppsProvider_Add_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kSubAppsProvider_Add_Name = 0;

  function SubAppsProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SubAppsProvider,
                                                   handleOrPtrInfo);
  }

  function SubAppsProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SubAppsProvider, associatedInterfacePtrInfo);
  }

  SubAppsProviderAssociatedPtr.prototype =
      Object.create(SubAppsProviderPtr.prototype);
  SubAppsProviderAssociatedPtr.prototype.constructor =
      SubAppsProviderAssociatedPtr;

  function SubAppsProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  SubAppsProviderPtr.prototype.add = function() {
    return SubAppsProviderProxy.prototype.add
        .apply(this.ptr.getProxy(), arguments);
  };

  SubAppsProviderProxy.prototype.add = function() {
    var params_ = new SubAppsProvider_Add_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSubAppsProvider_Add_Name,
          codec.align(SubAppsProvider_Add_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SubAppsProvider_Add_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SubAppsProvider_Add_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function SubAppsProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  SubAppsProviderStub.prototype.add = function() {
    return this.delegate_ && this.delegate_.add && this.delegate_.add();
  }

  SubAppsProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  SubAppsProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSubAppsProvider_Add_Name:
      var params = reader.decodeStruct(SubAppsProvider_Add_Params);
      this.add().then(function(response) {
        var responseParams =
            new SubAppsProvider_Add_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kSubAppsProvider_Add_Name,
            codec.align(SubAppsProvider_Add_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SubAppsProvider_Add_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSubAppsProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSubAppsProvider_Add_Name:
        if (message.expectsResponse())
          paramsClass = SubAppsProvider_Add_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSubAppsProviderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSubAppsProvider_Add_Name:
        if (message.isResponse())
          paramsClass = SubAppsProvider_Add_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SubAppsProvider = {
    name: 'blink.mojom.SubAppsProvider',
    kVersion: 0,
    ptrClass: SubAppsProviderPtr,
    proxyClass: SubAppsProviderProxy,
    stubClass: SubAppsProviderStub,
    validateRequest: validateSubAppsProviderRequest,
    validateResponse: validateSubAppsProviderResponse,
  };
  SubAppsProviderStub.prototype.validator = validateSubAppsProviderRequest;
  SubAppsProviderProxy.prototype.validator = validateSubAppsProviderResponse;
  exports.SubAppsProviderResult = SubAppsProviderResult;
  exports.SubAppsProvider = SubAppsProvider;
  exports.SubAppsProviderPtr = SubAppsProviderPtr;
  exports.SubAppsProviderAssociatedPtr = SubAppsProviderAssociatedPtr;
})();