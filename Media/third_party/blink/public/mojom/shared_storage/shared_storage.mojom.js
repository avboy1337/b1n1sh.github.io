// third_party/blink/public/mojom/shared_storage/shared_storage.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/shared_storage/shared_storage.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }




  function SharedStorageDocumentServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SharedStorageDocumentService,
                                                   handleOrPtrInfo);
  }

  function SharedStorageDocumentServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SharedStorageDocumentService, associatedInterfacePtrInfo);
  }

  SharedStorageDocumentServiceAssociatedPtr.prototype =
      Object.create(SharedStorageDocumentServicePtr.prototype);
  SharedStorageDocumentServiceAssociatedPtr.prototype.constructor =
      SharedStorageDocumentServiceAssociatedPtr;

  function SharedStorageDocumentServiceProxy(receiver) {
    this.receiver_ = receiver;
  }

  function SharedStorageDocumentServiceStub(delegate) {
    this.delegate_ = delegate;
  }

  SharedStorageDocumentServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  SharedStorageDocumentServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateSharedStorageDocumentServiceRequest(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateSharedStorageDocumentServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var SharedStorageDocumentService = {
    name: 'blink.mojom.SharedStorageDocumentService',
    kVersion: 0,
    ptrClass: SharedStorageDocumentServicePtr,
    proxyClass: SharedStorageDocumentServiceProxy,
    stubClass: SharedStorageDocumentServiceStub,
    validateRequest: validateSharedStorageDocumentServiceRequest,
    validateResponse: null,
  };
  SharedStorageDocumentServiceStub.prototype.validator = validateSharedStorageDocumentServiceRequest;
  SharedStorageDocumentServiceProxy.prototype.validator = null;
  exports.SharedStorageDocumentService = SharedStorageDocumentService;
  exports.SharedStorageDocumentServicePtr = SharedStorageDocumentServicePtr;
  exports.SharedStorageDocumentServiceAssociatedPtr = SharedStorageDocumentServiceAssociatedPtr;
})();