// chrome/test/data/webui/mojo/foobar.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/test/data/webui/mojo/foobar.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('test.mojom');



  function Foo_GetFoo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Foo_GetFoo_Params.prototype.initDefaults_ = function() {
  };
  Foo_GetFoo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Foo_GetFoo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Foo_GetFoo_Params.encodedSize = codec.kStructHeaderSize + 0;

  Foo_GetFoo_Params.decode = function(decoder) {
    var packed;
    var val = new Foo_GetFoo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Foo_GetFoo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Foo_GetFoo_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Foo_GetFoo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Foo_GetFoo_ResponseParams.prototype.initDefaults_ = function() {
    this.value = null;
  };
  Foo_GetFoo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Foo_GetFoo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Foo_GetFoo_ResponseParams.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Foo_GetFoo_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Foo_GetFoo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Foo_GetFoo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Foo_GetFoo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Foo_GetFoo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.value);
  };
  function Bar_GetBar_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Bar_GetBar_Params.prototype.initDefaults_ = function() {
  };
  Bar_GetBar_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Bar_GetBar_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Bar_GetBar_Params.encodedSize = codec.kStructHeaderSize + 0;

  Bar_GetBar_Params.decode = function(decoder) {
    var packed;
    var val = new Bar_GetBar_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Bar_GetBar_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Bar_GetBar_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Bar_GetBar_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Bar_GetBar_ResponseParams.prototype.initDefaults_ = function() {
    this.value = null;
  };
  Bar_GetBar_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Bar_GetBar_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Bar_GetBar_ResponseParams.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Bar_GetBar_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Bar_GetBar_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Bar_GetBar_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Bar_GetBar_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Bar_GetBar_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.value);
  };
  function Baz_GetBaz_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Baz_GetBaz_Params.prototype.initDefaults_ = function() {
  };
  Baz_GetBaz_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Baz_GetBaz_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Baz_GetBaz_Params.encodedSize = codec.kStructHeaderSize + 0;

  Baz_GetBaz_Params.decode = function(decoder) {
    var packed;
    var val = new Baz_GetBaz_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Baz_GetBaz_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Baz_GetBaz_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Baz_GetBaz_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Baz_GetBaz_ResponseParams.prototype.initDefaults_ = function() {
    this.value = null;
  };
  Baz_GetBaz_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Baz_GetBaz_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Baz_GetBaz_ResponseParams.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Baz_GetBaz_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Baz_GetBaz_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Baz_GetBaz_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Baz_GetBaz_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Baz_GetBaz_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.value);
  };
  var kFoo_GetFoo_Name = 1657919896;

  function FooPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Foo,
                                                   handleOrPtrInfo);
  }

  function FooAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Foo, associatedInterfacePtrInfo);
  }

  FooAssociatedPtr.prototype =
      Object.create(FooPtr.prototype);
  FooAssociatedPtr.prototype.constructor =
      FooAssociatedPtr;

  function FooProxy(receiver) {
    this.receiver_ = receiver;
  }
  FooPtr.prototype.getFoo = function() {
    return FooProxy.prototype.getFoo
        .apply(this.ptr.getProxy(), arguments);
  };

  FooProxy.prototype.getFoo = function() {
    var params_ = new Foo_GetFoo_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFoo_GetFoo_Name,
          codec.align(Foo_GetFoo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Foo_GetFoo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Foo_GetFoo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function FooStub(delegate) {
    this.delegate_ = delegate;
  }
  FooStub.prototype.getFoo = function() {
    return this.delegate_ && this.delegate_.getFoo && this.delegate_.getFoo();
  }

  FooStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  FooStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFoo_GetFoo_Name:
      var params = reader.decodeStruct(Foo_GetFoo_Params);
      this.getFoo().then(function(response) {
        var responseParams =
            new Foo_GetFoo_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kFoo_GetFoo_Name,
            codec.align(Foo_GetFoo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Foo_GetFoo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateFooRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFoo_GetFoo_Name:
        if (message.expectsResponse())
          paramsClass = Foo_GetFoo_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFooResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kFoo_GetFoo_Name:
        if (message.isResponse())
          paramsClass = Foo_GetFoo_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Foo = {
    name: 'test.mojom.Foo',
    kVersion: 0,
    ptrClass: FooPtr,
    proxyClass: FooProxy,
    stubClass: FooStub,
    validateRequest: validateFooRequest,
    validateResponse: validateFooResponse,
  };
  FooStub.prototype.validator = validateFooRequest;
  FooProxy.prototype.validator = validateFooResponse;
  var kBar_GetBar_Name = 1615853221;

  function BarPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Bar,
                                                   handleOrPtrInfo);
  }

  function BarAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Bar, associatedInterfacePtrInfo);
  }

  BarAssociatedPtr.prototype =
      Object.create(BarPtr.prototype);
  BarAssociatedPtr.prototype.constructor =
      BarAssociatedPtr;

  function BarProxy(receiver) {
    this.receiver_ = receiver;
  }
  BarPtr.prototype.getBar = function() {
    return BarProxy.prototype.getBar
        .apply(this.ptr.getProxy(), arguments);
  };

  BarProxy.prototype.getBar = function() {
    var params_ = new Bar_GetBar_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kBar_GetBar_Name,
          codec.align(Bar_GetBar_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Bar_GetBar_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Bar_GetBar_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function BarStub(delegate) {
    this.delegate_ = delegate;
  }
  BarStub.prototype.getBar = function() {
    return this.delegate_ && this.delegate_.getBar && this.delegate_.getBar();
  }

  BarStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  BarStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kBar_GetBar_Name:
      var params = reader.decodeStruct(Bar_GetBar_Params);
      this.getBar().then(function(response) {
        var responseParams =
            new Bar_GetBar_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kBar_GetBar_Name,
            codec.align(Bar_GetBar_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Bar_GetBar_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateBarRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kBar_GetBar_Name:
        if (message.expectsResponse())
          paramsClass = Bar_GetBar_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateBarResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kBar_GetBar_Name:
        if (message.isResponse())
          paramsClass = Bar_GetBar_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Bar = {
    name: 'test.mojom.Bar',
    kVersion: 0,
    ptrClass: BarPtr,
    proxyClass: BarProxy,
    stubClass: BarStub,
    validateRequest: validateBarRequest,
    validateResponse: validateBarResponse,
  };
  BarStub.prototype.validator = validateBarRequest;
  BarProxy.prototype.validator = validateBarResponse;
  var kBaz_GetBaz_Name = 2001832381;

  function BazPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Baz,
                                                   handleOrPtrInfo);
  }

  function BazAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Baz, associatedInterfacePtrInfo);
  }

  BazAssociatedPtr.prototype =
      Object.create(BazPtr.prototype);
  BazAssociatedPtr.prototype.constructor =
      BazAssociatedPtr;

  function BazProxy(receiver) {
    this.receiver_ = receiver;
  }
  BazPtr.prototype.getBaz = function() {
    return BazProxy.prototype.getBaz
        .apply(this.ptr.getProxy(), arguments);
  };

  BazProxy.prototype.getBaz = function() {
    var params_ = new Baz_GetBaz_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kBaz_GetBaz_Name,
          codec.align(Baz_GetBaz_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Baz_GetBaz_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Baz_GetBaz_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function BazStub(delegate) {
    this.delegate_ = delegate;
  }
  BazStub.prototype.getBaz = function() {
    return this.delegate_ && this.delegate_.getBaz && this.delegate_.getBaz();
  }

  BazStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  BazStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kBaz_GetBaz_Name:
      var params = reader.decodeStruct(Baz_GetBaz_Params);
      this.getBaz().then(function(response) {
        var responseParams =
            new Baz_GetBaz_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kBaz_GetBaz_Name,
            codec.align(Baz_GetBaz_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Baz_GetBaz_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateBazRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kBaz_GetBaz_Name:
        if (message.expectsResponse())
          paramsClass = Baz_GetBaz_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateBazResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kBaz_GetBaz_Name:
        if (message.isResponse())
          paramsClass = Baz_GetBaz_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Baz = {
    name: 'test.mojom.Baz',
    kVersion: 0,
    ptrClass: BazPtr,
    proxyClass: BazProxy,
    stubClass: BazStub,
    validateRequest: validateBazRequest,
    validateResponse: validateBazResponse,
  };
  BazStub.prototype.validator = validateBazRequest;
  BazProxy.prototype.validator = validateBazResponse;
  exports.Foo = Foo;
  exports.FooPtr = FooPtr;
  exports.FooAssociatedPtr = FooAssociatedPtr;
  exports.Bar = Bar;
  exports.BarPtr = BarPtr;
  exports.BarAssociatedPtr = BarAssociatedPtr;
  exports.Baz = Baz;
  exports.BazPtr = BazPtr;
  exports.BazAssociatedPtr = BazAssociatedPtr;
})();