// extensions/common/mojom/event_dispatcher.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'extensions/common/mojom/event_dispatcher.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('extensions.mojom');
  var values$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/values.mojom', '../../../mojo/public/mojom/base/values.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../url/mojom/url.mojom.js');
  }



  function EventFilteringInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  EventFilteringInfo.prototype.initDefaults_ = function() {
    this.url = null;
    this.serviceType = null;
    this.hasInstanceId = false;
    this.hasWindowExposedByDefault = false;
    this.windowExposedByDefault = false;
    this.instanceId = 0;
    this.windowType = null;
  };
  EventFilteringInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  EventFilteringInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate EventFilteringInfo.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate EventFilteringInfo.serviceType
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;




    // validate EventFilteringInfo.windowType
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, true)
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  EventFilteringInfo.encodedSize = codec.kStructHeaderSize + 32;

  EventFilteringInfo.decode = function(decoder) {
    var packed;
    var val = new EventFilteringInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.serviceType =
        decoder.decodeStruct(codec.NullableString);
    packed = decoder.readUint8();
    val.hasInstanceId = (packed >> 0) & 1 ? true : false;
    val.hasWindowExposedByDefault = (packed >> 1) & 1 ? true : false;
    val.windowExposedByDefault = (packed >> 2) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.instanceId =
        decoder.decodeStruct(codec.Int32);
    val.windowType =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  EventFilteringInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(EventFilteringInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.NullableString, val.serviceType);
    packed = 0;
    packed |= (val.hasInstanceId & 1) << 0
    packed |= (val.hasWindowExposedByDefault & 1) << 1
    packed |= (val.windowExposedByDefault & 1) << 2
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.instanceId);
    encoder.encodeStruct(codec.NullableString, val.windowType);
  };
  function DispatchEventParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DispatchEventParams.prototype.initDefaults_ = function() {
    this.workerThreadId = 0;
    this.eventId = 0;
    this.extensionId = null;
    this.eventName = null;
    this.isUserGesture = false;
    this.filteringInfo = null;
  };
  DispatchEventParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DispatchEventParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate DispatchEventParams.extensionId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DispatchEventParams.eventName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;




    // validate DispatchEventParams.filteringInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, EventFilteringInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DispatchEventParams.encodedSize = codec.kStructHeaderSize + 40;

  DispatchEventParams.decode = function(decoder) {
    var packed;
    var val = new DispatchEventParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.workerThreadId =
        decoder.decodeStruct(codec.Int32);
    val.eventId =
        decoder.decodeStruct(codec.Int32);
    val.extensionId =
        decoder.decodeStruct(codec.String);
    val.eventName =
        decoder.decodeStruct(codec.String);
    packed = decoder.readUint8();
    val.isUserGesture = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.filteringInfo =
        decoder.decodeStructPointer(EventFilteringInfo);
    return val;
  };

  DispatchEventParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DispatchEventParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.workerThreadId);
    encoder.encodeStruct(codec.Int32, val.eventId);
    encoder.encodeStruct(codec.String, val.extensionId);
    encoder.encodeStruct(codec.String, val.eventName);
    packed = 0;
    packed |= (val.isUserGesture & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(EventFilteringInfo, val.filteringInfo);
  };
  exports.EventFilteringInfo = EventFilteringInfo;
  exports.DispatchEventParams = DispatchEventParams;
})();